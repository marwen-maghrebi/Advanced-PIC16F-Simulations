

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Wed Dec 25 22:52:45 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    12                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2
    23                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    24                           	dabs	1,0x7E,2
    25     0000                     
    26                           ; Generated 12/10/2023 GMT
    27                           ; 
    28                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution. Publication is not required when
    42                           ;        this file is used in an embedded application.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC16F877A Definitions
    58                           ; 
    59                           ; SFR Addresses
    60     0004                     fsr             equ	4
    61     0004                     fsr0            equ	4
    62     0000                     indf            equ	0
    63     0000                     indf0           equ	0
    64     0002                     pc              equ	2
    65     0002                     pcl             equ	2
    66     000A                     pclath          equ	10
    67     0003                     status          equ	3
    68     0000                     INDF            equ	0	;# 
    69     0001                     TMR0            equ	1	;# 
    70     0002                     PCL             equ	2	;# 
    71     0003                     STATUS          equ	3	;# 
    72     0004                     FSR             equ	4	;# 
    73     0005                     PORTA           equ	5	;# 
    74     0006                     PORTB           equ	6	;# 
    75     0007                     PORTC           equ	7	;# 
    76     0008                     PORTD           equ	8	;# 
    77     0009                     PORTE           equ	9	;# 
    78     000A                     PCLATH          equ	10	;# 
    79     000B                     INTCON          equ	11	;# 
    80     000C                     PIR1            equ	12	;# 
    81     000D                     PIR2            equ	13	;# 
    82     000E                     TMR1            equ	14	;# 
    83     000E                     TMR1L           equ	14	;# 
    84     000F                     TMR1H           equ	15	;# 
    85     0010                     T1CON           equ	16	;# 
    86     0011                     TMR2            equ	17	;# 
    87     0012                     T2CON           equ	18	;# 
    88     0013                     SSPBUF          equ	19	;# 
    89     0014                     SSPCON          equ	20	;# 
    90     0015                     CCPR1           equ	21	;# 
    91     0015                     CCPR1L          equ	21	;# 
    92     0016                     CCPR1H          equ	22	;# 
    93     0017                     CCP1CON         equ	23	;# 
    94     0018                     RCSTA           equ	24	;# 
    95     0019                     TXREG           equ	25	;# 
    96     001A                     RCREG           equ	26	;# 
    97     001B                     CCPR2           equ	27	;# 
    98     001B                     CCPR2L          equ	27	;# 
    99     001C                     CCPR2H          equ	28	;# 
   100     001D                     CCP2CON         equ	29	;# 
   101     001E                     ADRESH          equ	30	;# 
   102     001F                     ADCON0          equ	31	;# 
   103     0081                     OPTION_REG      equ	129	;# 
   104     0085                     TRISA           equ	133	;# 
   105     0086                     TRISB           equ	134	;# 
   106     0087                     TRISC           equ	135	;# 
   107     0088                     TRISD           equ	136	;# 
   108     0089                     TRISE           equ	137	;# 
   109     008C                     PIE1            equ	140	;# 
   110     008D                     PIE2            equ	141	;# 
   111     008E                     PCON            equ	142	;# 
   112     0091                     SSPCON2         equ	145	;# 
   113     0092                     PR2             equ	146	;# 
   114     0093                     SSPADD          equ	147	;# 
   115     0094                     SSPSTAT         equ	148	;# 
   116     0098                     TXSTA           equ	152	;# 
   117     0099                     SPBRG           equ	153	;# 
   118     009C                     CMCON           equ	156	;# 
   119     009D                     CVRCON          equ	157	;# 
   120     009E                     ADRESL          equ	158	;# 
   121     009F                     ADCON1          equ	159	;# 
   122     010C                     EEDATA          equ	268	;# 
   123     010D                     EEADR           equ	269	;# 
   124     010E                     EEDATH          equ	270	;# 
   125     010F                     EEADRH          equ	271	;# 
   126     018C                     EECON1          equ	396	;# 
   127     018D                     EECON2          equ	397	;# 
   128     0000                     INDF            equ	0	;# 
   129     0001                     TMR0            equ	1	;# 
   130     0002                     PCL             equ	2	;# 
   131     0003                     STATUS          equ	3	;# 
   132     0004                     FSR             equ	4	;# 
   133     0005                     PORTA           equ	5	;# 
   134     0006                     PORTB           equ	6	;# 
   135     0007                     PORTC           equ	7	;# 
   136     0008                     PORTD           equ	8	;# 
   137     0009                     PORTE           equ	9	;# 
   138     000A                     PCLATH          equ	10	;# 
   139     000B                     INTCON          equ	11	;# 
   140     000C                     PIR1            equ	12	;# 
   141     000D                     PIR2            equ	13	;# 
   142     000E                     TMR1            equ	14	;# 
   143     000E                     TMR1L           equ	14	;# 
   144     000F                     TMR1H           equ	15	;# 
   145     0010                     T1CON           equ	16	;# 
   146     0011                     TMR2            equ	17	;# 
   147     0012                     T2CON           equ	18	;# 
   148     0013                     SSPBUF          equ	19	;# 
   149     0014                     SSPCON          equ	20	;# 
   150     0015                     CCPR1           equ	21	;# 
   151     0015                     CCPR1L          equ	21	;# 
   152     0016                     CCPR1H          equ	22	;# 
   153     0017                     CCP1CON         equ	23	;# 
   154     0018                     RCSTA           equ	24	;# 
   155     0019                     TXREG           equ	25	;# 
   156     001A                     RCREG           equ	26	;# 
   157     001B                     CCPR2           equ	27	;# 
   158     001B                     CCPR2L          equ	27	;# 
   159     001C                     CCPR2H          equ	28	;# 
   160     001D                     CCP2CON         equ	29	;# 
   161     001E                     ADRESH          equ	30	;# 
   162     001F                     ADCON0          equ	31	;# 
   163     0081                     OPTION_REG      equ	129	;# 
   164     0085                     TRISA           equ	133	;# 
   165     0086                     TRISB           equ	134	;# 
   166     0087                     TRISC           equ	135	;# 
   167     0088                     TRISD           equ	136	;# 
   168     0089                     TRISE           equ	137	;# 
   169     008C                     PIE1            equ	140	;# 
   170     008D                     PIE2            equ	141	;# 
   171     008E                     PCON            equ	142	;# 
   172     0091                     SSPCON2         equ	145	;# 
   173     0092                     PR2             equ	146	;# 
   174     0093                     SSPADD          equ	147	;# 
   175     0094                     SSPSTAT         equ	148	;# 
   176     0098                     TXSTA           equ	152	;# 
   177     0099                     SPBRG           equ	153	;# 
   178     009C                     CMCON           equ	156	;# 
   179     009D                     CVRCON          equ	157	;# 
   180     009E                     ADRESL          equ	158	;# 
   181     009F                     ADCON1          equ	159	;# 
   182     010C                     EEDATA          equ	268	;# 
   183     010D                     EEADR           equ	269	;# 
   184     010E                     EEDATH          equ	270	;# 
   185     010F                     EEADRH          equ	271	;# 
   186     018C                     EECON1          equ	396	;# 
   187     018D                     EECON2          equ	397	;# 
   188     0000                     INDF            equ	0	;# 
   189     0001                     TMR0            equ	1	;# 
   190     0002                     PCL             equ	2	;# 
   191     0003                     STATUS          equ	3	;# 
   192     0004                     FSR             equ	4	;# 
   193     0005                     PORTA           equ	5	;# 
   194     0006                     PORTB           equ	6	;# 
   195     0007                     PORTC           equ	7	;# 
   196     0008                     PORTD           equ	8	;# 
   197     0009                     PORTE           equ	9	;# 
   198     000A                     PCLATH          equ	10	;# 
   199     000B                     INTCON          equ	11	;# 
   200     000C                     PIR1            equ	12	;# 
   201     000D                     PIR2            equ	13	;# 
   202     000E                     TMR1            equ	14	;# 
   203     000E                     TMR1L           equ	14	;# 
   204     000F                     TMR1H           equ	15	;# 
   205     0010                     T1CON           equ	16	;# 
   206     0011                     TMR2            equ	17	;# 
   207     0012                     T2CON           equ	18	;# 
   208     0013                     SSPBUF          equ	19	;# 
   209     0014                     SSPCON          equ	20	;# 
   210     0015                     CCPR1           equ	21	;# 
   211     0015                     CCPR1L          equ	21	;# 
   212     0016                     CCPR1H          equ	22	;# 
   213     0017                     CCP1CON         equ	23	;# 
   214     0018                     RCSTA           equ	24	;# 
   215     0019                     TXREG           equ	25	;# 
   216     001A                     RCREG           equ	26	;# 
   217     001B                     CCPR2           equ	27	;# 
   218     001B                     CCPR2L          equ	27	;# 
   219     001C                     CCPR2H          equ	28	;# 
   220     001D                     CCP2CON         equ	29	;# 
   221     001E                     ADRESH          equ	30	;# 
   222     001F                     ADCON0          equ	31	;# 
   223     0081                     OPTION_REG      equ	129	;# 
   224     0085                     TRISA           equ	133	;# 
   225     0086                     TRISB           equ	134	;# 
   226     0087                     TRISC           equ	135	;# 
   227     0088                     TRISD           equ	136	;# 
   228     0089                     TRISE           equ	137	;# 
   229     008C                     PIE1            equ	140	;# 
   230     008D                     PIE2            equ	141	;# 
   231     008E                     PCON            equ	142	;# 
   232     0091                     SSPCON2         equ	145	;# 
   233     0092                     PR2             equ	146	;# 
   234     0093                     SSPADD          equ	147	;# 
   235     0094                     SSPSTAT         equ	148	;# 
   236     0098                     TXSTA           equ	152	;# 
   237     0099                     SPBRG           equ	153	;# 
   238     009C                     CMCON           equ	156	;# 
   239     009D                     CVRCON          equ	157	;# 
   240     009E                     ADRESL          equ	158	;# 
   241     009F                     ADCON1          equ	159	;# 
   242     010C                     EEDATA          equ	268	;# 
   243     010D                     EEADR           equ	269	;# 
   244     010E                     EEDATH          equ	270	;# 
   245     010F                     EEADRH          equ	271	;# 
   246     018C                     EECON1          equ	396	;# 
   247     018D                     EECON2          equ	397	;# 
   248                           
   249                           	psect	idataBANK0
   250     05A5                     __pidataBANK0:
   251                           
   252                           ;initializer for _MOTOR2_IN2
   253     05A5  3403               	retlw	3
   254                           
   255                           ;initializer for _MOTOR2_IN1
   256     05A6  3402               	retlw	2
   257                           
   258                           ;initializer for _MOTOR1_IN2
   259     05A7  3401               	retlw	1
   260     0019                     _TXREG          set	25
   261     0006                     _PORTB          set	6
   262     001A                     _RCREG          set	26
   263     00C4                     _CREN           set	196
   264     00C7                     _SPEN           set	199
   265     0065                     _RCIF           set	101
   266     0099                     _SPBRG          set	153
   267     0086                     _TRISBbits      set	134
   268     04C1                     _TRMT           set	1217
   269     04C5                     _TXEN           set	1221
   270     043F                     _TRISC7         set	1087
   271     043E                     _TRISC6         set	1086
   272     04C4                     _SYNC           set	1220
   273     04C2                     _BRGH           set	1218
   274                           
   275                           	psect	strings
   276     0003                     __pstrings:
   277     0003                     stringtab:
   278     0003                     __stringtab:
   279     0003                     stringcode:	
   280                           ;	String table - string pointers are 1 byte each
   281                           
   282     0003                     stringdir:
   283     0003  3000               	movlw	high stringdir
   284     0004  008A               	movwf	10
   285     0005  0804               	movf	4,w
   286     0006  0A84               	incf	4,f
   287     0007  0782               	addwf	2,f
   288     0008                     __stringbase:
   289     0008  3400               	retlw	0
   290     0009                     __end_of__stringtab:
   291     0009                     STR_2:
   292     0009  3431               	retlw	49	;'1'
   293     000A  3420               	retlw	32	;' '
   294     000B  342D               	retlw	45	;'-'
   295     000C  342D               	retlw	45	;'-'
   296     000D  343E               	retlw	62	;'>'
   297     000E  3420               	retlw	32	;' '
   298     000F  3446               	retlw	70	;'F'
   299     0010  346F               	retlw	111	;'o'
   300     0011  3472               	retlw	114	;'r'
   301     0012  3477               	retlw	119	;'w'
   302     0013  3461               	retlw	97	;'a'
   303     0014  3472               	retlw	114	;'r'
   304     0015  3464               	retlw	100	;'d'
   305     0016  342C               	retlw	44	;','
   306     0017  3420               	retlw	32	;' '
   307     0018  3432               	retlw	50	;'2'
   308     0019  3420               	retlw	32	;' '
   309     001A  342D               	retlw	45	;'-'
   310     001B  342D               	retlw	45	;'-'
   311     001C  343E               	retlw	62	;'>'
   312     001D  3420               	retlw	32	;' '
   313     001E  3442               	retlw	66	;'B'
   314     001F  3461               	retlw	97	;'a'
   315     0020  3463               	retlw	99	;'c'
   316     0021  346B               	retlw	107	;'k'
   317     0022  3477               	retlw	119	;'w'
   318     0023  3461               	retlw	97	;'a'
   319     0024  3472               	retlw	114	;'r'
   320     0025  3464               	retlw	100	;'d'
   321     0026  342C               	retlw	44	;','
   322     0027  3420               	retlw	32	;' '
   323     0028  3433               	retlw	51	;'3'
   324     0029  3420               	retlw	32	;' '
   325     002A  342D               	retlw	45	;'-'
   326     002B  342D               	retlw	45	;'-'
   327     002C  343E               	retlw	62	;'>'
   328     002D  3420               	retlw	32	;' '
   329     002E  344C               	retlw	76	;'L'
   330     002F  3465               	retlw	101	;'e'
   331     0030  3466               	retlw	102	;'f'
   332     0031  3474               	retlw	116	;'t'
   333     0032  342C               	retlw	44	;','
   334     0033  3420               	retlw	32	;' '
   335     0034  3434               	retlw	52	;'4'
   336     0035  3420               	retlw	32	;' '
   337     0036  342D               	retlw	45	;'-'
   338     0037  342D               	retlw	45	;'-'
   339     0038  343E               	retlw	62	;'>'
   340     0039  3420               	retlw	32	;' '
   341     003A  3452               	retlw	82	;'R'
   342     003B  3469               	retlw	105	;'i'
   343     003C  3467               	retlw	103	;'g'
   344     003D  3468               	retlw	104	;'h'
   345     003E  3474               	retlw	116	;'t'
   346     003F  342C               	retlw	44	;','
   347     0040  3420               	retlw	32	;' '
   348     0041  3435               	retlw	53	;'5'
   349     0042  3420               	retlw	32	;' '
   350     0043  342D               	retlw	45	;'-'
   351     0044  342D               	retlw	45	;'-'
   352     0045  343E               	retlw	62	;'>'
   353     0046  3420               	retlw	32	;' '
   354     0047  3453               	retlw	83	;'S'
   355     0048  3454               	retlw	84	;'T'
   356     0049  344F               	retlw	79	;'O'
   357     004A  3450               	retlw	80	;'P'
   358     004B  342C               	retlw	44	;','
   359     004C  3420               	retlw	32	;' '
   360     004D  3436               	retlw	54	;'6'
   361     004E  3420               	retlw	32	;' '
   362     004F  342D               	retlw	45	;'-'
   363     0050  342D               	retlw	45	;'-'
   364     0051  343E               	retlw	62	;'>'
   365     0052  3420               	retlw	32	;' '
   366     0053  3448               	retlw	72	;'H'
   367     0054  3465               	retlw	101	;'e'
   368     0055  346C               	retlw	108	;'l'
   369     0056  3470               	retlw	112	;'p'
   370     0057  340A               	retlw	10
   371     0058  340D               	retlw	13
   372     0059  3400               	retlw	0
   373     005A                     STR_1:
   374     005A  344C               	retlw	76	;'L'
   375     005B  3439               	retlw	57	;'9'
   376     005C  3431               	retlw	49	;'1'
   377     005D  3431               	retlw	49	;'1'
   378     005E  3430               	retlw	48	;'0'
   379     005F  3473               	retlw	115	;'s'
   380     0060  345F               	retlw	95	;'_'
   381     0061  3444               	retlw	68	;'D'
   382     0062  3469               	retlw	105	;'i'
   383     0063  3461               	retlw	97	;'a'
   384     0064  3467               	retlw	103	;'g'
   385     0065  346E               	retlw	110	;'n'
   386     0066  346F               	retlw	111	;'o'
   387     0067  3473               	retlw	115	;'s'
   388     0068  3474               	retlw	116	;'t'
   389     0069  3469               	retlw	105	;'i'
   390     006A  3463               	retlw	99	;'c'
   391     006B  3420               	retlw	32	;' '
   392     006C  3452               	retlw	82	;'R'
   393     006D  3445               	retlw	69	;'E'
   394     006E  3441               	retlw	65	;'A'
   395     006F  3444               	retlw	68	;'D'
   396     0070  3459               	retlw	89	;'Y'
   397     0071  3420               	retlw	32	;' '
   398     0072  3421               	retlw	33	;'!'
   399     0073  340A               	retlw	10
   400     0074  340D               	retlw	13
   401     0075  3400               	retlw	0
   402     0076                     STR_9:
   403     0076  3449               	retlw	73	;'I'
   404     0077  346E               	retlw	110	;'n'
   405     0078  3476               	retlw	118	;'v'
   406     0079  3461               	retlw	97	;'a'
   407     007A  346C               	retlw	108	;'l'
   408     007B  3469               	retlw	105	;'i'
   409     007C  3464               	retlw	100	;'d'
   410     007D  3420               	retlw	32	;' '
   411     007E  3443               	retlw	67	;'C'
   412     007F  346F               	retlw	111	;'o'
   413     0080  346D               	retlw	109	;'m'
   414     0081  346D               	retlw	109	;'m'
   415     0082  3461               	retlw	97	;'a'
   416     0083  346E               	retlw	110	;'n'
   417     0084  3464               	retlw	100	;'d'
   418     0085  340A               	retlw	10
   419     0086  340D               	retlw	13
   420     0087  3400               	retlw	0
   421     0088                     STR_4:
   422     0088  3442               	retlw	66	;'B'
   423     0089  3461               	retlw	97	;'a'
   424     008A  3463               	retlw	99	;'c'
   425     008B  346B               	retlw	107	;'k'
   426     008C  3477               	retlw	119	;'w'
   427     008D  3461               	retlw	97	;'a'
   428     008E  3472               	retlw	114	;'r'
   429     008F  3464               	retlw	100	;'d'
   430     0090  340A               	retlw	10
   431     0091  340D               	retlw	13
   432     0092  3400               	retlw	0
   433     0093                     STR_7:
   434     0093  3453               	retlw	83	;'S'
   435     0094  3474               	retlw	116	;'t'
   436     0095  346F               	retlw	111	;'o'
   437     0096  3470               	retlw	112	;'p'
   438     0097  3470               	retlw	112	;'p'
   439     0098  3465               	retlw	101	;'e'
   440     0099  3464               	retlw	100	;'d'
   441     009A  340A               	retlw	10
   442     009B  340D               	retlw	13
   443     009C  3400               	retlw	0
   444     009D                     STR_3:
   445     009D  3446               	retlw	70	;'F'
   446     009E  346F               	retlw	111	;'o'
   447     009F  3472               	retlw	114	;'r'
   448     00A0  3477               	retlw	119	;'w'
   449     00A1  3461               	retlw	97	;'a'
   450     00A2  3472               	retlw	114	;'r'
   451     00A3  3464               	retlw	100	;'d'
   452     00A4  340A               	retlw	10
   453     00A5  340D               	retlw	13
   454     00A6  3400               	retlw	0
   455     00A7                     STR_6:
   456     00A7  3452               	retlw	82	;'R'
   457     00A8  3469               	retlw	105	;'i'
   458     00A9  3467               	retlw	103	;'g'
   459     00AA  3468               	retlw	104	;'h'
   460     00AB  3474               	retlw	116	;'t'
   461     00AC  340A               	retlw	10
   462     00AD  340D               	retlw	13
   463     00AE  3400               	retlw	0
   464     00AF                     STR_5:
   465     00AF  344C               	retlw	76	;'L'
   466     00B0  3465               	retlw	101	;'e'
   467     00B1  3466               	retlw	102	;'f'
   468     00B2  3474               	retlw	116	;'t'
   469     00B3  340A               	retlw	10
   470     00B4  340D               	retlw	13
   471     00B5  3400               	retlw	0
   472     0009                     STR_8           equ	STR_2
   473                           
   474                           	psect	cinit
   475     07E9                     start_initialization:	
   476                           ; #config settings
   477                           
   478     07E9                     __initialization:
   479                           
   480                           ; Initialize objects allocated to BANK0
   481     07E9  120A  118A  25A5  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   482     07EE  00A0               	movwf	__pdataBANK0& (0+127)
   483     07EF  120A  118A  25A6  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   484     07F4  00A1               	movwf	(__pdataBANK0+1)& (0+127)
   485     07F5  120A  118A  25A7  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   486     07FA  00A2               	movwf	(__pdataBANK0+2)& (0+127)
   487                           
   488                           ; Clear objects allocated to BANK0
   489     07FB  01A6               	clrf	__pbssBANK0& (0+127)
   490     07FC                     end_of_initialization:	
   491                           ;End of C runtime variable initialization code
   492                           
   493     07FC                     __end_of__initialization:
   494     07FC  0183               	clrf	3
   495     07FD  120A  118A  2F41   	ljmp	_main	;jump to C main() function
   496                           
   497                           	psect	bssBANK0
   498     0026                     __pbssBANK0:
   499     0026                     _MOTOR1_IN1:
   500     0026                     	ds	1
   501                           
   502                           	psect	dataBANK0
   503     0020                     __pdataBANK0:
   504     0020                     _MOTOR2_IN2:
   505     0020                     	ds	1
   506     0021                     _MOTOR2_IN1:
   507     0021                     	ds	1
   508     0022                     _MOTOR1_IN2:
   509     0022                     	ds	1
   510                           
   511                           	psect	cstackCOMMON
   512     0070                     __pcstackCOMMON:
   513     0070                     ?_Motor_Init:
   514     0070                     ?_UART_TX_Init:	
   515                           ; 1 bytes @ 0x0
   516                           
   517     0070                     ?_Motor_Stop:	
   518                           ; 1 bytes @ 0x0
   519                           
   520     0070                     ?_main:	
   521                           ; 1 bytes @ 0x0
   522                           
   523     0070                     ?_Motor_Control:	
   524                           ; 1 bytes @ 0x0
   525                           
   526     0070                     ?_UART_TX_Empty:	
   527                           ; 1 bytes @ 0x0
   528                           
   529     0070                     ?_UART_Write:	
   530                           ; 1 bytes @ 0x0
   531                           
   532     0070                     UART_Write@data:	
   533                           ; 1 bytes @ 0x0
   534                           
   535     0070                     Motor_Control@motor:	
   536                           ; 1 bytes @ 0x0
   537                           
   538     0070                     ??_Motor_Init:	
   539                           ; 2 bytes @ 0x0
   540                           
   541     0070                     ??_UART_TX_Init:	
   542                           ; 1 bytes @ 0x0
   543                           
   544     0070                     ??_UART_TX_Empty:	
   545                           ; 1 bytes @ 0x0
   546                           
   547     0070                     ??_UART_Write:	
   548                           ; 1 bytes @ 0x0
   549                           
   550                           
   551                           ; 1 bytes @ 0x0
   552     0070                     	ds	1
   553     0071                     ?_UART_Write_Text:
   554     0071                     UART_Write_Text@text:	
   555                           ; 1 bytes @ 0x1
   556                           
   557                           
   558                           ; 1 bytes @ 0x1
   559     0071                     	ds	1
   560     0072                     Motor_Control@cmd:
   561     0072                     ??_UART_Write_Text:	
   562                           ; 2 bytes @ 0x2
   563                           
   564                           
   565                           ; 1 bytes @ 0x2
   566     0072                     	ds	2
   567     0074                     Motor_Control@speed:
   568                           
   569                           ; 2 bytes @ 0x4
   570     0074                     	ds	2
   571     0076                     ??_Motor_Control:
   572                           
   573                           ; 1 bytes @ 0x6
   574     0076                     	ds	1
   575     0077                     Motor_Control@i:
   576                           
   577                           ; 2 bytes @ 0x7
   578     0077                     	ds	2
   579     0079                     Motor_Control@in1:
   580                           
   581                           ; 1 bytes @ 0x9
   582     0079                     	ds	1
   583     007A                     Motor_Control@in2:
   584                           
   585                           ; 1 bytes @ 0xA
   586     007A                     	ds	1
   587     007B                     ?_Motor_Forward:
   588     007B                     ?_Motor_Backward:	
   589                           ; 1 bytes @ 0xB
   590                           
   591     007B                     ?_Motor_Left:	
   592                           ; 1 bytes @ 0xB
   593                           
   594     007B                     ?_Motor_Right:	
   595                           ; 1 bytes @ 0xB
   596                           
   597     007B                     Motor_Forward@speed:	
   598                           ; 1 bytes @ 0xB
   599                           
   600     007B                     Motor_Backward@speed:	
   601                           ; 2 bytes @ 0xB
   602                           
   603     007B                     Motor_Right@speed:	
   604                           ; 2 bytes @ 0xB
   605                           
   606     007B                     Motor_Left@speed:	
   607                           ; 2 bytes @ 0xB
   608                           
   609     007B                     ??_Motor_Stop:	
   610                           ; 2 bytes @ 0xB
   611                           
   612                           
   613                           ; 1 bytes @ 0xB
   614     007B                     	ds	2
   615     007D                     main@input:
   616     007D                     ??_Motor_Forward:	
   617                           ; 1 bytes @ 0xD
   618                           
   619     007D                     ??_Motor_Backward:	
   620                           ; 1 bytes @ 0xD
   621                           
   622     007D                     ??_Motor_Left:	
   623                           ; 1 bytes @ 0xD
   624                           
   625     007D                     ??_Motor_Right:	
   626                           ; 1 bytes @ 0xD
   627                           
   628                           
   629                           ; 1 bytes @ 0xD
   630     007D                     	ds	1
   631                           
   632                           	psect	cstackBANK0
   633     0023                     __pcstackBANK0:
   634     0023                     ??_main:
   635                           
   636                           ; 1 bytes @ 0x0
   637     0023                     	ds	3
   638                           
   639                           	psect	maintext
   640     0741                     __pmaintext:	
   641 ;;
   642 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   643 ;;
   644 ;; *************** function _main *****************
   645 ;; Defined at:
   646 ;;		line 24 in file "main.c"
   647 ;; Parameters:    Size  Location     Type
   648 ;;		None
   649 ;; Auto vars:     Size  Location     Type
   650 ;;  input           1   13[COMMON] unsigned char 
   651 ;; Return value:  Size  Location     Type
   652 ;;                  1    wreg      void 
   653 ;; Registers used:
   654 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   655 ;; Tracked objects:
   656 ;;		On entry : B00/0
   657 ;;		On exit  : 0/0
   658 ;;		Unchanged: 0/0
   659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   660 ;;      Params:         0       0       0       0       0
   661 ;;      Locals:         1       0       0       0       0
   662 ;;      Temps:          0       3       0       0       0
   663 ;;      Totals:         1       3       0       0       0
   664 ;;Total ram usage:        4 bytes
   665 ;; Hardware stack levels required when called: 3
   666 ;; This function calls:
   667 ;;		_Motor_Backward
   668 ;;		_Motor_Forward
   669 ;;		_Motor_Init
   670 ;;		_Motor_Left
   671 ;;		_Motor_Right
   672 ;;		_Motor_Stop
   673 ;;		_UART_TX_Init
   674 ;;		_UART_Write_Text
   675 ;; This function is called by:
   676 ;;		Startup code after reset
   677 ;; This function uses a non-reentrant model
   678 ;;
   679                           
   680     0741                     _main:	
   681                           ;psect for function _main
   682                           
   683     0741                     l841:	
   684                           ;incstack = 0
   685                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   686                           
   687                           
   688                           ;main.c: 26: Motor_Init();
   689     0741  120A  118A  25AE  120A  118A  	fcall	_Motor_Init
   690                           
   691                           ;main.c: 27: UART_TX_Init();
   692     0746  120A  118A  25C8  120A  118A  	fcall	_UART_TX_Init
   693     074B                     l843:
   694                           
   695                           ;main.c: 28: UART_Write_Text("L9110s_Diagnostic READY !\n\r");
   696     074B  3052               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   697     074C  00F1               	movwf	UART_Write_Text@text
   698     074D  120A  118A  25DA  120A  118A  	fcall	_UART_Write_Text
   699     0752                     l845:
   700                           
   701                           ;main.c: 29: UART_Write_Text("1 --> Forward, 2 --> Backward, 3 --> Left, 4 --> Right, 5 
      +                          --> STOP, 6 --> Help\n\r");
   702     0752  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   703     0753  00F1               	movwf	UART_Write_Text@text
   704     0754  120A  118A  25DA  120A  118A  	fcall	_UART_Write_Text
   705     0759                     l847:
   706                           
   707                           ;main.c: 32:     if (RCIF) {
   708     0759  1283               	bcf	3,5	;RP0=0, select bank0
   709     075A  1303               	bcf	3,6	;RP1=0, select bank0
   710     075B  1E8C               	btfss	12,5	;volatile
   711     075C  2F5E               	goto	u251
   712     075D  2F5F               	goto	u250
   713     075E                     u251:
   714     075E  2F59               	goto	l847
   715     075F                     u250:
   716     075F                     l849:
   717                           
   718                           ;main.c: 33:         char input = RCREG;
   719     075F  081A               	movf	26,w	;volatile
   720     0760  00FD               	movwf	main@input
   721                           
   722                           ;main.c: 35:         switch (input) {
   723     0761  2FC3               	goto	l877
   724     0762                     l851:
   725                           
   726                           ;main.c: 37:             Motor_Forward(255);
   727     0762  30FF               	movlw	255
   728     0763  00FB               	movwf	Motor_Forward@speed
   729     0764  3000               	movlw	0
   730     0765  00FC               	movwf	Motor_Forward@speed+1
   731     0766  120A  118A  263A  120A  118A  	fcall	_Motor_Forward
   732     076B                     l853:
   733                           
   734                           ;main.c: 38:             UART_Write_Text("Forward\n\r");
   735     076B  3095               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   736     076C  00F1               	movwf	UART_Write_Text@text
   737     076D  120A  118A  25DA  120A  118A  	fcall	_UART_Write_Text
   738                           
   739                           ;main.c: 39:             break;
   740     0772  2FD7               	goto	l879
   741     0773                     l855:
   742                           
   743                           ;main.c: 41:             Motor_Backward(255);
   744     0773  30FF               	movlw	255
   745     0774  00FB               	movwf	Motor_Backward@speed
   746     0775  3000               	movlw	0
   747     0776  00FC               	movwf	Motor_Backward@speed+1
   748     0777  120A  118A  2617  120A  118A  	fcall	_Motor_Backward
   749     077C                     l857:
   750                           
   751                           ;main.c: 42:             UART_Write_Text("Backward\n\r");
   752     077C  3080               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   753     077D  00F1               	movwf	UART_Write_Text@text
   754     077E  120A  118A  25DA  120A  118A  	fcall	_UART_Write_Text
   755                           
   756                           ;main.c: 43:             break;
   757     0783  2FD7               	goto	l879
   758     0784                     l859:
   759                           
   760                           ;main.c: 45:             Motor_Left(255);
   761     0784  30FF               	movlw	255
   762     0785  00FB               	movwf	Motor_Left@speed
   763     0786  3000               	movlw	0
   764     0787  00FC               	movwf	Motor_Left@speed+1
   765     0788  120A  118A  265D  120A  118A  	fcall	_Motor_Left
   766     078D                     l861:
   767                           
   768                           ;main.c: 46:             UART_Write_Text("Left\n\r");
   769     078D  30A7               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   770     078E  00F1               	movwf	UART_Write_Text@text
   771     078F  120A  118A  25DA  120A  118A  	fcall	_UART_Write_Text
   772                           
   773                           ;main.c: 47:             break;
   774     0794  2FD7               	goto	l879
   775     0795                     l863:
   776                           
   777                           ;main.c: 49:             Motor_Right(255);
   778     0795  30FF               	movlw	255
   779     0796  00FB               	movwf	Motor_Right@speed
   780     0797  3000               	movlw	0
   781     0798  00FC               	movwf	Motor_Right@speed+1
   782     0799  120A  118A  2680  120A  118A  	fcall	_Motor_Right
   783     079E                     l865:
   784                           
   785                           ;main.c: 50:             UART_Write_Text("Right\n\r");
   786     079E  309F               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
   787     079F  00F1               	movwf	UART_Write_Text@text
   788     07A0  120A  118A  25DA  120A  118A  	fcall	_UART_Write_Text
   789                           
   790                           ;main.c: 51:             break;
   791     07A5  2FD7               	goto	l879
   792     07A6                     l867:
   793                           
   794                           ;main.c: 53:             Motor_Stop();
   795     07A6  120A  118A  25F6  120A  118A  	fcall	_Motor_Stop
   796     07AB                     l869:
   797                           
   798                           ;main.c: 54:             UART_Write_Text("Stopped\n\r");
   799     07AB  308B               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
   800     07AC  00F1               	movwf	UART_Write_Text@text
   801     07AD  120A  118A  25DA  120A  118A  	fcall	_UART_Write_Text
   802                           
   803                           ;main.c: 55:             break;
   804     07B2  2FD7               	goto	l879
   805     07B3                     l871:
   806                           
   807                           ;main.c: 57:             UART_Write_Text("1 --> Forward, 2 --> Backward, 3 --> Left, 4 -
      +                          -> Right, 5 --> STOP, 6 --> Help\n\r");
   808     07B3  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   809     07B4  00F1               	movwf	UART_Write_Text@text
   810     07B5  120A  118A  25DA  120A  118A  	fcall	_UART_Write_Text
   811                           
   812                           ;main.c: 58:             break;
   813     07BA  2FD7               	goto	l879
   814     07BB                     l873:
   815                           
   816                           ;main.c: 60:             UART_Write_Text("Invalid Command\n\r");
   817     07BB  306E               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
   818     07BC  00F1               	movwf	UART_Write_Text@text
   819     07BD  120A  118A  25DA  120A  118A  	fcall	_UART_Write_Text
   820                           
   821                           ;main.c: 61:             break;
   822     07C2  2FD7               	goto	l879
   823     07C3                     l877:
   824     07C3  087D               	movf	main@input,w
   825                           
   826                           ; Switch size 1, requested type "simple"
   827                           ; Number of cases is 6, Range of values is 49 to 54
   828                           ; switch strategies available:
   829                           ; Name         Instructions Cycles
   830                           ; simple_byte           19    10 (average)
   831                           ; direct_byte           29    11 (fixed)
   832                           ; jumptable            263     9 (fixed)
   833                           ;	Chosen strategy is simple_byte
   834     07C4  3A31               	xorlw	49	; case 49
   835     07C5  1903               	skipnz
   836     07C6  2F62               	goto	l851
   837     07C7  3A03               	xorlw	3	; case 50
   838     07C8  1903               	skipnz
   839     07C9  2F73               	goto	l855
   840     07CA  3A01               	xorlw	1	; case 51
   841     07CB  1903               	skipnz
   842     07CC  2F84               	goto	l859
   843     07CD  3A07               	xorlw	7	; case 52
   844     07CE  1903               	skipnz
   845     07CF  2F95               	goto	l863
   846     07D0  3A01               	xorlw	1	; case 53
   847     07D1  1903               	skipnz
   848     07D2  2FA6               	goto	l867
   849     07D3  3A03               	xorlw	3	; case 54
   850     07D4  1903               	skipnz
   851     07D5  2FB3               	goto	l871
   852     07D6  2FBB               	goto	l873
   853     07D7                     l879:
   854                           
   855                           ;main.c: 63:         _delay((unsigned long)((500)*(16000000/4000.0)));
   856     07D7  300B               	movlw	11
   857     07D8  1283               	bcf	3,5	;RP0=0, select bank0
   858     07D9  1303               	bcf	3,6	;RP1=0, select bank0
   859     07DA  00A5               	movwf	??_main+2
   860     07DB  3026               	movlw	38
   861     07DC  00A4               	movwf	??_main+1
   862     07DD  305D               	movlw	93
   863     07DE  00A3               	movwf	??_main
   864     07DF                     u267:
   865     07DF  0BA3               	decfsz	??_main,f
   866     07E0  2FDF               	goto	u267
   867     07E1  0BA4               	decfsz	??_main+1,f
   868     07E2  2FDF               	goto	u267
   869     07E3  0BA5               	decfsz	??_main+2,f
   870     07E4  2FDF               	goto	u267
   871     07E5  2F59               	goto	l847
   872     07E6  120A  118A  2800   	ljmp	start
   873     07E9                     __end_of_main:
   874                           
   875                           	psect	text1
   876     05DA                     __ptext1:	
   877 ;; *************** function _UART_Write_Text *****************
   878 ;; Defined at:
   879 ;;		line 35 in file "uart.c"
   880 ;; Parameters:    Size  Location     Type
   881 ;;  text            1    1[COMMON] PTR const unsigned char 
   882 ;;		 -> STR_9(18), STR_8(81), STR_7(10), STR_6(8), 
   883 ;;		 -> STR_5(7), STR_4(11), STR_3(10), STR_2(81), 
   884 ;;		 -> STR_1(28), 
   885 ;; Auto vars:     Size  Location     Type
   886 ;;		None
   887 ;; Return value:  Size  Location     Type
   888 ;;                  1    wreg      void 
   889 ;; Registers used:
   890 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   891 ;; Tracked objects:
   892 ;;		On entry : 0/0
   893 ;;		On exit  : 0/0
   894 ;;		Unchanged: 0/0
   895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   896 ;;      Params:         1       0       0       0       0
   897 ;;      Locals:         0       0       0       0       0
   898 ;;      Temps:          0       0       0       0       0
   899 ;;      Totals:         1       0       0       0       0
   900 ;;Total ram usage:        1 bytes
   901 ;; Hardware stack levels used: 1
   902 ;; Hardware stack levels required when called: 2
   903 ;; This function calls:
   904 ;;		_UART_Write
   905 ;; This function is called by:
   906 ;;		_main
   907 ;; This function uses a non-reentrant model
   908 ;;
   909                           
   910     05DA                     _UART_Write_Text:	
   911                           ;psect for function _UART_Write_Text
   912                           
   913     05DA                     l823:	
   914                           ;incstack = 0
   915                           ; Regs used in _UART_Write_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   916                           
   917                           
   918                           ;uart.c: 36:     while (*text != '\0') {
   919     05DA  2DE9               	goto	l829
   920     05DB                     l825:
   921                           
   922                           ;uart.c: 37:         UART_Write(*text++);
   923     05DB  0871               	movf	UART_Write_Text@text,w
   924     05DC  0084               	movwf	4
   925     05DD  120A  118A  2003  120A  118A  	fcall	stringdir
   926     05E2  120A  118A  25B8  120A  118A  	fcall	_UART_Write
   927     05E7                     l827:
   928     05E7  3001               	movlw	1
   929     05E8  07F1               	addwf	UART_Write_Text@text,f
   930     05E9                     l829:
   931                           
   932                           ;uart.c: 36:     while (*text != '\0') {
   933     05E9  0871               	movf	UART_Write_Text@text,w
   934     05EA  0084               	movwf	4
   935     05EB  120A  118A  2003  120A  118A  	fcall	stringdir
   936     05F0  3A00               	xorlw	0
   937     05F1  1D03               	skipz
   938     05F2  2DF4               	goto	u241
   939     05F3  2DF5               	goto	u240
   940     05F4                     u241:
   941     05F4  2DDB               	goto	l825
   942     05F5                     u240:
   943     05F5                     l125:
   944     05F5  0008               	return
   945     05F6                     __end_of_UART_Write_Text:
   946                           
   947                           	psect	text2
   948     05B8                     __ptext2:	
   949 ;; *************** function _UART_Write *****************
   950 ;; Defined at:
   951 ;;		line 30 in file "uart.c"
   952 ;; Parameters:    Size  Location     Type
   953 ;;  data            1    wreg     unsigned char 
   954 ;; Auto vars:     Size  Location     Type
   955 ;;  data            1    0[COMMON] unsigned char 
   956 ;; Return value:  Size  Location     Type
   957 ;;                  1    wreg      void 
   958 ;; Registers used:
   959 ;;		wreg, pclath, cstack
   960 ;; Tracked objects:
   961 ;;		On entry : 0/0
   962 ;;		On exit  : 0/0
   963 ;;		Unchanged: 0/0
   964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   965 ;;      Params:         0       0       0       0       0
   966 ;;      Locals:         1       0       0       0       0
   967 ;;      Temps:          0       0       0       0       0
   968 ;;      Totals:         1       0       0       0       0
   969 ;;Total ram usage:        1 bytes
   970 ;; Hardware stack levels used: 1
   971 ;; Hardware stack levels required when called: 1
   972 ;; This function calls:
   973 ;;		_UART_TX_Empty
   974 ;; This function is called by:
   975 ;;		_UART_Write_Text
   976 ;; This function uses a non-reentrant model
   977 ;;
   978                           
   979     05B8                     _UART_Write:	
   980                           ;psect for function _UART_Write
   981                           
   982                           
   983                           ;incstack = 0
   984                           ; Regs used in _UART_Write: [wreg+pclath+cstack]
   985                           ;UART_Write@data stored from wreg
   986     05B8  00F0               	movwf	UART_Write@data
   987     05B9                     l703:
   988     05B9                     l705:	
   989                           ;uart.c: 31:     while (!UART_TX_Empty());
   990                           
   991     05B9  120A  118A  25A8  120A  118A  	fcall	_UART_TX_Empty
   992     05BE  3A00               	xorlw	0
   993     05BF  1903               	skipnz
   994     05C0  2DC2               	goto	u111
   995     05C1  2DC3               	goto	u110
   996     05C2                     u111:
   997     05C2  2DB9               	goto	l705
   998     05C3                     u110:
   999     05C3                     l707:
  1000                           
  1001                           ;uart.c: 32:     TXREG = data;
  1002     05C3  0870               	movf	UART_Write@data,w
  1003     05C4  1283               	bcf	3,5	;RP0=0, select bank0
  1004     05C5  1303               	bcf	3,6	;RP1=0, select bank0
  1005     05C6  0099               	movwf	25	;volatile
  1006     05C7                     l119:
  1007     05C7  0008               	return
  1008     05C8                     __end_of_UART_Write:
  1009                           
  1010                           	psect	text3
  1011     05A8                     __ptext3:	
  1012 ;; *************** function _UART_TX_Empty *****************
  1013 ;; Defined at:
  1014 ;;		line 26 in file "uart.c"
  1015 ;; Parameters:    Size  Location     Type
  1016 ;;		None
  1017 ;; Auto vars:     Size  Location     Type
  1018 ;;		None
  1019 ;; Return value:  Size  Location     Type
  1020 ;;                  1    wreg      unsigned char 
  1021 ;; Registers used:
  1022 ;;		wreg
  1023 ;; Tracked objects:
  1024 ;;		On entry : 0/0
  1025 ;;		On exit  : 0/0
  1026 ;;		Unchanged: 0/0
  1027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1028 ;;      Params:         0       0       0       0       0
  1029 ;;      Locals:         0       0       0       0       0
  1030 ;;      Temps:          0       0       0       0       0
  1031 ;;      Totals:         0       0       0       0       0
  1032 ;;Total ram usage:        0 bytes
  1033 ;; Hardware stack levels used: 1
  1034 ;; This function calls:
  1035 ;;		Nothing
  1036 ;; This function is called by:
  1037 ;;		_UART_Write
  1038 ;; This function uses a non-reentrant model
  1039 ;;
  1040                           
  1041     05A8                     _UART_TX_Empty:	
  1042                           ;psect for function _UART_TX_Empty
  1043                           
  1044     05A8                     l669:	
  1045                           ;incstack = 0
  1046                           ; Regs used in _UART_TX_Empty: [wreg]
  1047                           
  1048                           
  1049                           ;uart.c: 27:     return TRMT;
  1050     05A8  3000               	movlw	0
  1051     05A9  1683               	bsf	3,5	;RP0=1, select bank1
  1052     05AA  1303               	bcf	3,6	;RP1=0, select bank1
  1053     05AB  1898               	btfsc	24,1	;volatile
  1054     05AC  3001               	movlw	1
  1055     05AD                     l113:
  1056     05AD  0008               	return
  1057     05AE                     __end_of_UART_TX_Empty:
  1058                           
  1059                           	psect	text4
  1060     05C8                     __ptext4:	
  1061 ;; *************** function _UART_TX_Init *****************
  1062 ;; Defined at:
  1063 ;;		line 4 in file "uart.c"
  1064 ;; Parameters:    Size  Location     Type
  1065 ;;		None
  1066 ;; Auto vars:     Size  Location     Type
  1067 ;;		None
  1068 ;; Return value:  Size  Location     Type
  1069 ;;                  1    wreg      void 
  1070 ;; Registers used:
  1071 ;;		None
  1072 ;; Tracked objects:
  1073 ;;		On entry : 0/0
  1074 ;;		On exit  : 0/0
  1075 ;;		Unchanged: 0/0
  1076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1077 ;;      Params:         0       0       0       0       0
  1078 ;;      Locals:         0       0       0       0       0
  1079 ;;      Temps:          0       0       0       0       0
  1080 ;;      Totals:         0       0       0       0       0
  1081 ;;Total ram usage:        0 bytes
  1082 ;; Hardware stack levels used: 1
  1083 ;; This function calls:
  1084 ;;		Nothing
  1085 ;; This function is called by:
  1086 ;;		_main
  1087 ;; This function uses a non-reentrant model
  1088 ;;
  1089                           
  1090     05C8                     _UART_TX_Init:	
  1091                           ;psect for function _UART_TX_Init
  1092                           
  1093     05C8                     l713:	
  1094                           ;incstack = 0
  1095                           ; Regs used in _UART_TX_Init: []
  1096                           
  1097                           
  1098                           ;uart.c: 9:     BRGH = 1;
  1099     05C8  1683               	bsf	3,5	;RP0=1, select bank1
  1100     05C9  1303               	bcf	3,6	;RP1=0, select bank1
  1101     05CA  1518               	bsf	24,2	;volatile
  1102                           
  1103                           ;uart.c: 10:     SPBRG = 103;
  1104     05CB  3067               	movlw	103
  1105     05CC  0099               	movwf	25	;volatile
  1106                           
  1107                           ;uart.c: 13:     SYNC = 0;
  1108     05CD  1218               	bcf	24,4	;volatile
  1109                           
  1110                           ;uart.c: 14:     SPEN = 1;
  1111     05CE  1283               	bcf	3,5	;RP0=0, select bank0
  1112     05CF  1303               	bcf	3,6	;RP1=0, select bank0
  1113     05D0  1798               	bsf	24,7	;volatile
  1114                           
  1115                           ;uart.c: 17:     TRISC6 = 0;
  1116     05D1  1683               	bsf	3,5	;RP0=1, select bank1
  1117     05D2  1303               	bcf	3,6	;RP1=0, select bank1
  1118     05D3  1307               	bcf	7,6	;volatile
  1119                           
  1120                           ;uart.c: 18:     TRISC7 = 1;
  1121     05D4  1787               	bsf	7,7	;volatile
  1122                           
  1123                           ;uart.c: 21:     TXEN = 1;
  1124     05D5  1698               	bsf	24,5	;volatile
  1125                           
  1126                           ;uart.c: 23:     CREN = 1;
  1127     05D6  1283               	bcf	3,5	;RP0=0, select bank0
  1128     05D7  1303               	bcf	3,6	;RP1=0, select bank0
  1129     05D8  1618               	bsf	24,4	;volatile
  1130     05D9                     l110:
  1131     05D9  0008               	return
  1132     05DA                     __end_of_UART_TX_Init:
  1133                           
  1134                           	psect	text5
  1135     05F6                     __ptext5:	
  1136 ;; *************** function _Motor_Stop *****************
  1137 ;; Defined at:
  1138 ;;		line 141 in file "main.c"
  1139 ;; Parameters:    Size  Location     Type
  1140 ;;		None
  1141 ;; Auto vars:     Size  Location     Type
  1142 ;;		None
  1143 ;; Return value:  Size  Location     Type
  1144 ;;                  1    wreg      void 
  1145 ;; Registers used:
  1146 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1147 ;; Tracked objects:
  1148 ;;		On entry : 0/0
  1149 ;;		On exit  : 0/0
  1150 ;;		Unchanged: 0/0
  1151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1152 ;;      Params:         0       0       0       0       0
  1153 ;;      Locals:         0       0       0       0       0
  1154 ;;      Temps:          0       0       0       0       0
  1155 ;;      Totals:         0       0       0       0       0
  1156 ;;Total ram usage:        0 bytes
  1157 ;; Hardware stack levels used: 1
  1158 ;; Hardware stack levels required when called: 1
  1159 ;; This function calls:
  1160 ;;		_Motor_Control
  1161 ;; This function is called by:
  1162 ;;		_main
  1163 ;; This function uses a non-reentrant model
  1164 ;;
  1165                           
  1166     05F6                     _Motor_Stop:	
  1167                           ;psect for function _Motor_Stop
  1168                           
  1169     05F6                     l839:	
  1170                           ;incstack = 0
  1171                           ; Regs used in _Motor_Stop: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1172                           
  1173                           
  1174                           ;main.c: 142:     Motor_Control(1, 3, 0);
  1175     05F6  3001               	movlw	1
  1176     05F7  00F0               	movwf	Motor_Control@motor
  1177     05F8  3000               	movlw	0
  1178     05F9  00F1               	movwf	Motor_Control@motor+1
  1179     05FA  3003               	movlw	3
  1180     05FB  00F2               	movwf	Motor_Control@cmd
  1181     05FC  3000               	movlw	0
  1182     05FD  00F3               	movwf	Motor_Control@cmd+1
  1183     05FE  3000               	movlw	0
  1184     05FF  00F4               	movwf	Motor_Control@speed
  1185     0600  00F5               	movwf	Motor_Control@speed+1
  1186     0601  120A  118A  26A3  120A  118A  	fcall	_Motor_Control
  1187                           
  1188                           ;main.c: 143:     Motor_Control(2, 3, 0);
  1189     0606  3002               	movlw	2
  1190     0607  00F0               	movwf	Motor_Control@motor
  1191     0608  3000               	movlw	0
  1192     0609  00F1               	movwf	Motor_Control@motor+1
  1193     060A  3003               	movlw	3
  1194     060B  00F2               	movwf	Motor_Control@cmd
  1195     060C  3000               	movlw	0
  1196     060D  00F3               	movwf	Motor_Control@cmd+1
  1197     060E  3000               	movlw	0
  1198     060F  00F4               	movwf	Motor_Control@speed
  1199     0610  00F5               	movwf	Motor_Control@speed+1
  1200     0611  120A  118A  26A3  120A  118A  	fcall	_Motor_Control
  1201     0616                     l87:
  1202     0616  0008               	return
  1203     0617                     __end_of_Motor_Stop:
  1204                           
  1205                           	psect	text6
  1206     0680                     __ptext6:	
  1207 ;; *************** function _Motor_Right *****************
  1208 ;; Defined at:
  1209 ;;		line 129 in file "main.c"
  1210 ;; Parameters:    Size  Location     Type
  1211 ;;  speed           2   11[COMMON] int 
  1212 ;; Auto vars:     Size  Location     Type
  1213 ;;		None
  1214 ;; Return value:  Size  Location     Type
  1215 ;;                  1    wreg      void 
  1216 ;; Registers used:
  1217 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1218 ;; Tracked objects:
  1219 ;;		On entry : 0/0
  1220 ;;		On exit  : 0/0
  1221 ;;		Unchanged: 0/0
  1222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1223 ;;      Params:         2       0       0       0       0
  1224 ;;      Locals:         0       0       0       0       0
  1225 ;;      Temps:          0       0       0       0       0
  1226 ;;      Totals:         2       0       0       0       0
  1227 ;;Total ram usage:        2 bytes
  1228 ;; Hardware stack levels used: 1
  1229 ;; Hardware stack levels required when called: 1
  1230 ;; This function calls:
  1231 ;;		_Motor_Control
  1232 ;; This function is called by:
  1233 ;;		_main
  1234 ;; This function uses a non-reentrant model
  1235 ;;
  1236                           
  1237     0680                     _Motor_Right:	
  1238                           ;psect for function _Motor_Right
  1239                           
  1240     0680                     l837:	
  1241                           ;incstack = 0
  1242                           ; Regs used in _Motor_Right: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1243                           
  1244                           
  1245                           ;main.c: 130:     Motor_Control(1, 1, speed);
  1246     0680  3001               	movlw	1
  1247     0681  00F0               	movwf	Motor_Control@motor
  1248     0682  3000               	movlw	0
  1249     0683  00F1               	movwf	Motor_Control@motor+1
  1250     0684  3001               	movlw	1
  1251     0685  00F2               	movwf	Motor_Control@cmd
  1252     0686  3000               	movlw	0
  1253     0687  00F3               	movwf	Motor_Control@cmd+1
  1254     0688  087C               	movf	Motor_Right@speed+1,w
  1255     0689  00F5               	movwf	Motor_Control@speed+1
  1256     068A  087B               	movf	Motor_Right@speed,w
  1257     068B  00F4               	movwf	Motor_Control@speed
  1258     068C  120A  118A  26A3  120A  118A  	fcall	_Motor_Control
  1259                           
  1260                           ;main.c: 131:     Motor_Control(2, 2, speed);
  1261     0691  3002               	movlw	2
  1262     0692  00F0               	movwf	Motor_Control@motor
  1263     0693  3000               	movlw	0
  1264     0694  00F1               	movwf	Motor_Control@motor+1
  1265     0695  3002               	movlw	2
  1266     0696  00F2               	movwf	Motor_Control@cmd
  1267     0697  3000               	movlw	0
  1268     0698  00F3               	movwf	Motor_Control@cmd+1
  1269     0699  087C               	movf	Motor_Right@speed+1,w
  1270     069A  00F5               	movwf	Motor_Control@speed+1
  1271     069B  087B               	movf	Motor_Right@speed,w
  1272     069C  00F4               	movwf	Motor_Control@speed
  1273     069D  120A  118A  26A3  120A  118A  	fcall	_Motor_Control
  1274     06A2                     l81:
  1275     06A2  0008               	return
  1276     06A3                     __end_of_Motor_Right:
  1277                           
  1278                           	psect	text7
  1279     065D                     __ptext7:	
  1280 ;; *************** function _Motor_Left *****************
  1281 ;; Defined at:
  1282 ;;		line 135 in file "main.c"
  1283 ;; Parameters:    Size  Location     Type
  1284 ;;  speed           2   11[COMMON] int 
  1285 ;; Auto vars:     Size  Location     Type
  1286 ;;		None
  1287 ;; Return value:  Size  Location     Type
  1288 ;;                  1    wreg      void 
  1289 ;; Registers used:
  1290 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1291 ;; Tracked objects:
  1292 ;;		On entry : 0/0
  1293 ;;		On exit  : 0/0
  1294 ;;		Unchanged: 0/0
  1295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1296 ;;      Params:         2       0       0       0       0
  1297 ;;      Locals:         0       0       0       0       0
  1298 ;;      Temps:          0       0       0       0       0
  1299 ;;      Totals:         2       0       0       0       0
  1300 ;;Total ram usage:        2 bytes
  1301 ;; Hardware stack levels used: 1
  1302 ;; Hardware stack levels required when called: 1
  1303 ;; This function calls:
  1304 ;;		_Motor_Control
  1305 ;; This function is called by:
  1306 ;;		_main
  1307 ;; This function uses a non-reentrant model
  1308 ;;
  1309                           
  1310     065D                     _Motor_Left:	
  1311                           ;psect for function _Motor_Left
  1312                           
  1313     065D                     l835:	
  1314                           ;incstack = 0
  1315                           ; Regs used in _Motor_Left: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1316                           
  1317                           
  1318                           ;main.c: 136:     Motor_Control(1, 2, speed);
  1319     065D  3001               	movlw	1
  1320     065E  00F0               	movwf	Motor_Control@motor
  1321     065F  3000               	movlw	0
  1322     0660  00F1               	movwf	Motor_Control@motor+1
  1323     0661  3002               	movlw	2
  1324     0662  00F2               	movwf	Motor_Control@cmd
  1325     0663  3000               	movlw	0
  1326     0664  00F3               	movwf	Motor_Control@cmd+1
  1327     0665  087C               	movf	Motor_Left@speed+1,w
  1328     0666  00F5               	movwf	Motor_Control@speed+1
  1329     0667  087B               	movf	Motor_Left@speed,w
  1330     0668  00F4               	movwf	Motor_Control@speed
  1331     0669  120A  118A  26A3  120A  118A  	fcall	_Motor_Control
  1332                           
  1333                           ;main.c: 137:     Motor_Control(2, 1, speed);
  1334     066E  3002               	movlw	2
  1335     066F  00F0               	movwf	Motor_Control@motor
  1336     0670  3000               	movlw	0
  1337     0671  00F1               	movwf	Motor_Control@motor+1
  1338     0672  3001               	movlw	1
  1339     0673  00F2               	movwf	Motor_Control@cmd
  1340     0674  3000               	movlw	0
  1341     0675  00F3               	movwf	Motor_Control@cmd+1
  1342     0676  087C               	movf	Motor_Left@speed+1,w
  1343     0677  00F5               	movwf	Motor_Control@speed+1
  1344     0678  087B               	movf	Motor_Left@speed,w
  1345     0679  00F4               	movwf	Motor_Control@speed
  1346     067A  120A  118A  26A3  120A  118A  	fcall	_Motor_Control
  1347     067F                     l84:
  1348     067F  0008               	return
  1349     0680                     __end_of_Motor_Left:
  1350                           
  1351                           	psect	text8
  1352     05AE                     __ptext8:	
  1353 ;; *************** function _Motor_Init *****************
  1354 ;; Defined at:
  1355 ;;		line 69 in file "main.c"
  1356 ;; Parameters:    Size  Location     Type
  1357 ;;		None
  1358 ;; Auto vars:     Size  Location     Type
  1359 ;;		None
  1360 ;; Return value:  Size  Location     Type
  1361 ;;                  1    wreg      void 
  1362 ;; Registers used:
  1363 ;;		status,2
  1364 ;; Tracked objects:
  1365 ;;		On entry : 0/0
  1366 ;;		On exit  : 0/0
  1367 ;;		Unchanged: 0/0
  1368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1369 ;;      Params:         0       0       0       0       0
  1370 ;;      Locals:         0       0       0       0       0
  1371 ;;      Temps:          0       0       0       0       0
  1372 ;;      Totals:         0       0       0       0       0
  1373 ;;Total ram usage:        0 bytes
  1374 ;; Hardware stack levels used: 1
  1375 ;; This function calls:
  1376 ;;		Nothing
  1377 ;; This function is called by:
  1378 ;;		_main
  1379 ;; This function uses a non-reentrant model
  1380 ;;
  1381                           
  1382     05AE                     _Motor_Init:	
  1383                           ;psect for function _Motor_Init
  1384                           
  1385     05AE                     l709:	
  1386                           ;incstack = 0
  1387                           ; Regs used in _Motor_Init: [status,2]
  1388                           
  1389                           
  1390                           ;main.c: 70:     TRISBbits.TRISB0 = 0;
  1391     05AE  1683               	bsf	3,5	;RP0=1, select bank1
  1392     05AF  1303               	bcf	3,6	;RP1=0, select bank1
  1393     05B0  1006               	bcf	6,0	;volatile
  1394                           
  1395                           ;main.c: 71:     TRISBbits.TRISB1 = 0;
  1396     05B1  1086               	bcf	6,1	;volatile
  1397                           
  1398                           ;main.c: 72:     TRISBbits.TRISB2 = 0;
  1399     05B2  1106               	bcf	6,2	;volatile
  1400                           
  1401                           ;main.c: 73:     TRISBbits.TRISB3 = 0;
  1402     05B3  1186               	bcf	6,3	;volatile
  1403     05B4                     l711:
  1404                           
  1405                           ;main.c: 74:     PORTB = 0;
  1406     05B4  1283               	bcf	3,5	;RP0=0, select bank0
  1407     05B5  1303               	bcf	3,6	;RP1=0, select bank0
  1408     05B6  0186               	clrf	6	;volatile
  1409     05B7                     l55:
  1410     05B7  0008               	return
  1411     05B8                     __end_of_Motor_Init:
  1412                           
  1413                           	psect	text9
  1414     063A                     __ptext9:	
  1415 ;; *************** function _Motor_Forward *****************
  1416 ;; Defined at:
  1417 ;;		line 117 in file "main.c"
  1418 ;; Parameters:    Size  Location     Type
  1419 ;;  speed           2   11[COMMON] int 
  1420 ;; Auto vars:     Size  Location     Type
  1421 ;;		None
  1422 ;; Return value:  Size  Location     Type
  1423 ;;                  1    wreg      void 
  1424 ;; Registers used:
  1425 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1426 ;; Tracked objects:
  1427 ;;		On entry : 0/0
  1428 ;;		On exit  : 0/0
  1429 ;;		Unchanged: 0/0
  1430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1431 ;;      Params:         2       0       0       0       0
  1432 ;;      Locals:         0       0       0       0       0
  1433 ;;      Temps:          0       0       0       0       0
  1434 ;;      Totals:         2       0       0       0       0
  1435 ;;Total ram usage:        2 bytes
  1436 ;; Hardware stack levels used: 1
  1437 ;; Hardware stack levels required when called: 1
  1438 ;; This function calls:
  1439 ;;		_Motor_Control
  1440 ;; This function is called by:
  1441 ;;		_main
  1442 ;; This function uses a non-reentrant model
  1443 ;;
  1444                           
  1445     063A                     _Motor_Forward:	
  1446                           ;psect for function _Motor_Forward
  1447                           
  1448     063A                     l831:	
  1449                           ;incstack = 0
  1450                           ; Regs used in _Motor_Forward: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1451                           
  1452                           
  1453                           ;main.c: 118:     Motor_Control(1, 1, speed);
  1454     063A  3001               	movlw	1
  1455     063B  00F0               	movwf	Motor_Control@motor
  1456     063C  3000               	movlw	0
  1457     063D  00F1               	movwf	Motor_Control@motor+1
  1458     063E  3001               	movlw	1
  1459     063F  00F2               	movwf	Motor_Control@cmd
  1460     0640  3000               	movlw	0
  1461     0641  00F3               	movwf	Motor_Control@cmd+1
  1462     0642  087C               	movf	Motor_Forward@speed+1,w
  1463     0643  00F5               	movwf	Motor_Control@speed+1
  1464     0644  087B               	movf	Motor_Forward@speed,w
  1465     0645  00F4               	movwf	Motor_Control@speed
  1466     0646  120A  118A  26A3  120A  118A  	fcall	_Motor_Control
  1467                           
  1468                           ;main.c: 119:     Motor_Control(2, 1, speed);
  1469     064B  3002               	movlw	2
  1470     064C  00F0               	movwf	Motor_Control@motor
  1471     064D  3000               	movlw	0
  1472     064E  00F1               	movwf	Motor_Control@motor+1
  1473     064F  3001               	movlw	1
  1474     0650  00F2               	movwf	Motor_Control@cmd
  1475     0651  3000               	movlw	0
  1476     0652  00F3               	movwf	Motor_Control@cmd+1
  1477     0653  087C               	movf	Motor_Forward@speed+1,w
  1478     0654  00F5               	movwf	Motor_Control@speed+1
  1479     0655  087B               	movf	Motor_Forward@speed,w
  1480     0656  00F4               	movwf	Motor_Control@speed
  1481     0657  120A  118A  26A3  120A  118A  	fcall	_Motor_Control
  1482     065C                     l75:
  1483     065C  0008               	return
  1484     065D                     __end_of_Motor_Forward:
  1485                           
  1486                           	psect	text10
  1487     0617                     __ptext10:	
  1488 ;; *************** function _Motor_Backward *****************
  1489 ;; Defined at:
  1490 ;;		line 123 in file "main.c"
  1491 ;; Parameters:    Size  Location     Type
  1492 ;;  speed           2   11[COMMON] int 
  1493 ;; Auto vars:     Size  Location     Type
  1494 ;;		None
  1495 ;; Return value:  Size  Location     Type
  1496 ;;                  1    wreg      void 
  1497 ;; Registers used:
  1498 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1499 ;; Tracked objects:
  1500 ;;		On entry : 0/0
  1501 ;;		On exit  : 0/0
  1502 ;;		Unchanged: 0/0
  1503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1504 ;;      Params:         2       0       0       0       0
  1505 ;;      Locals:         0       0       0       0       0
  1506 ;;      Temps:          0       0       0       0       0
  1507 ;;      Totals:         2       0       0       0       0
  1508 ;;Total ram usage:        2 bytes
  1509 ;; Hardware stack levels used: 1
  1510 ;; Hardware stack levels required when called: 1
  1511 ;; This function calls:
  1512 ;;		_Motor_Control
  1513 ;; This function is called by:
  1514 ;;		_main
  1515 ;; This function uses a non-reentrant model
  1516 ;;
  1517                           
  1518     0617                     _Motor_Backward:	
  1519                           ;psect for function _Motor_Backward
  1520                           
  1521     0617                     l833:	
  1522                           ;incstack = 0
  1523                           ; Regs used in _Motor_Backward: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1524                           
  1525                           
  1526                           ;main.c: 124:     Motor_Control(1, 2, speed);
  1527     0617  3001               	movlw	1
  1528     0618  00F0               	movwf	Motor_Control@motor
  1529     0619  3000               	movlw	0
  1530     061A  00F1               	movwf	Motor_Control@motor+1
  1531     061B  3002               	movlw	2
  1532     061C  00F2               	movwf	Motor_Control@cmd
  1533     061D  3000               	movlw	0
  1534     061E  00F3               	movwf	Motor_Control@cmd+1
  1535     061F  087C               	movf	Motor_Backward@speed+1,w
  1536     0620  00F5               	movwf	Motor_Control@speed+1
  1537     0621  087B               	movf	Motor_Backward@speed,w
  1538     0622  00F4               	movwf	Motor_Control@speed
  1539     0623  120A  118A  26A3  120A  118A  	fcall	_Motor_Control
  1540                           
  1541                           ;main.c: 125:     Motor_Control(2, 2, speed);
  1542     0628  3002               	movlw	2
  1543     0629  00F0               	movwf	Motor_Control@motor
  1544     062A  3000               	movlw	0
  1545     062B  00F1               	movwf	Motor_Control@motor+1
  1546     062C  3002               	movlw	2
  1547     062D  00F2               	movwf	Motor_Control@cmd
  1548     062E  3000               	movlw	0
  1549     062F  00F3               	movwf	Motor_Control@cmd+1
  1550     0630  087C               	movf	Motor_Backward@speed+1,w
  1551     0631  00F5               	movwf	Motor_Control@speed+1
  1552     0632  087B               	movf	Motor_Backward@speed,w
  1553     0633  00F4               	movwf	Motor_Control@speed
  1554     0634  120A  118A  26A3  120A  118A  	fcall	_Motor_Control
  1555     0639                     l78:
  1556     0639  0008               	return
  1557     063A                     __end_of_Motor_Backward:
  1558                           
  1559                           	psect	text11
  1560     06A3                     __ptext11:	
  1561 ;; *************** function _Motor_Control *****************
  1562 ;; Defined at:
  1563 ;;		line 78 in file "main.c"
  1564 ;; Parameters:    Size  Location     Type
  1565 ;;  motor           2    0[COMMON] int 
  1566 ;;  cmd             2    2[COMMON] int 
  1567 ;;  speed           2    4[COMMON] int 
  1568 ;; Auto vars:     Size  Location     Type
  1569 ;;  i               2    7[COMMON] int 
  1570 ;;  in2             1   10[COMMON] unsigned char 
  1571 ;;  in1             1    9[COMMON] unsigned char 
  1572 ;; Return value:  Size  Location     Type
  1573 ;;                  1    wreg      void 
  1574 ;; Registers used:
  1575 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1576 ;; Tracked objects:
  1577 ;;		On entry : 0/0
  1578 ;;		On exit  : 0/0
  1579 ;;		Unchanged: 0/0
  1580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1581 ;;      Params:         6       0       0       0       0
  1582 ;;      Locals:         4       0       0       0       0
  1583 ;;      Temps:          1       0       0       0       0
  1584 ;;      Totals:        11       0       0       0       0
  1585 ;;Total ram usage:       11 bytes
  1586 ;; Hardware stack levels used: 1
  1587 ;; This function calls:
  1588 ;;		Nothing
  1589 ;; This function is called by:
  1590 ;;		_Motor_Forward
  1591 ;;		_Motor_Backward
  1592 ;;		_Motor_Right
  1593 ;;		_Motor_Left
  1594 ;;		_Motor_Stop
  1595 ;; This function uses a non-reentrant model
  1596 ;;
  1597                           
  1598     06A3                     _Motor_Control:	
  1599                           ;psect for function _Motor_Control
  1600                           
  1601     06A3                     l793:	
  1602                           ;incstack = 0
  1603                           ; Regs used in _Motor_Control: [wreg-fsr0h+status,2+status,0+btemp+1]
  1604                           
  1605                           
  1606                           ;main.c: 79:     unsigned char in1, in2;;main.c: 81:     if (motor == 1) {
  1607     06A3  0370               	decf	Motor_Control@motor,w
  1608     06A4  0471               	iorwf	Motor_Control@motor+1,w
  1609     06A5  1D03               	btfss	3,2
  1610     06A6  2EA8               	goto	u141
  1611     06A7  2EA9               	goto	u140
  1612     06A8                     u141:
  1613     06A8  2EAD               	goto	l799
  1614     06A9                     u140:
  1615     06A9                     l795:
  1616                           
  1617                           ;main.c: 82:     in1 = MOTOR1_IN1;
  1618     06A9  01F9               	clrf	Motor_Control@in1
  1619     06AA                     l797:
  1620                           
  1621                           ;main.c: 83:     in2 = MOTOR1_IN2;
  1622     06AA  3001               	movlw	1
  1623     06AB  00FA               	movwf	Motor_Control@in2
  1624                           
  1625                           ;main.c: 84:     } else if (motor == 2) {
  1626     06AC  2F08               	goto	l811
  1627     06AD                     l799:
  1628     06AD  3002               	movlw	2
  1629     06AE  0670               	xorwf	Motor_Control@motor,w
  1630     06AF  0471               	iorwf	Motor_Control@motor+1,w
  1631     06B0  1D03               	btfss	3,2
  1632     06B1  2EB3               	goto	u151
  1633     06B2  2EB4               	goto	u150
  1634     06B3                     u151:
  1635     06B3  2F40               	goto	l62
  1636     06B4                     u150:
  1637     06B4                     l801:
  1638                           
  1639                           ;main.c: 85:     in1 = MOTOR2_IN1;
  1640     06B4  3002               	movlw	2
  1641     06B5  00F9               	movwf	Motor_Control@in1
  1642                           
  1643                           ;main.c: 86:     in2 = MOTOR2_IN2;
  1644     06B6  3003               	movlw	3
  1645     06B7  00FA               	movwf	Motor_Control@in2
  1646                           
  1647                           ;main.c: 87:     } else {
  1648     06B8  2F08               	goto	l811
  1649     06B9                     l803:
  1650                           
  1651                           ;main.c: 93:         PORTB |= (1 << in1);
  1652     06B9  3001               	movlw	1
  1653     06BA  00F6               	movwf	??_Motor_Control
  1654     06BB  0A79               	incf	Motor_Control@in1,w
  1655     06BC  2EBF               	goto	u164
  1656     06BD                     u165:
  1657     06BD  1003               	clrc
  1658     06BE  0DF6               	rlf	??_Motor_Control,f
  1659     06BF                     u164:
  1660     06BF  3EFF               	addlw	-1
  1661     06C0  1D03               	skipz
  1662     06C1  2EBD               	goto	u165
  1663     06C2  0876               	movf	??_Motor_Control,w
  1664     06C3  1283               	bcf	3,5	;RP0=0, select bank0
  1665     06C4  1303               	bcf	3,6	;RP1=0, select bank0
  1666     06C5  0486               	iorwf	6,f	;volatile
  1667                           
  1668                           ;main.c: 94:         PORTB &= ~(1 << in2);
  1669     06C6  3001               	movlw	1
  1670     06C7  00F6               	movwf	??_Motor_Control
  1671     06C8  0A7A               	incf	Motor_Control@in2,w
  1672     06C9  2ECC               	goto	u174
  1673     06CA                     u175:
  1674     06CA  1003               	clrc
  1675     06CB  0DF6               	rlf	??_Motor_Control,f
  1676     06CC                     u174:
  1677     06CC  3EFF               	addlw	-1
  1678     06CD  1D03               	skipz
  1679     06CE  2ECA               	goto	u175
  1680     06CF  0876               	movf	??_Motor_Control,w
  1681     06D0  3AFF               	xorlw	255
  1682     06D1  0586               	andwf	6,f	;volatile
  1683                           
  1684                           ;main.c: 95:         break;
  1685     06D2  2F18               	goto	l813
  1686     06D3                     l805:
  1687                           
  1688                           ;main.c: 97:         PORTB &= ~(1 << in1);
  1689     06D3  3001               	movlw	1
  1690     06D4  00F6               	movwf	??_Motor_Control
  1691     06D5  0A79               	incf	Motor_Control@in1,w
  1692     06D6  2ED9               	goto	u184
  1693     06D7                     u185:
  1694     06D7  1003               	clrc
  1695     06D8  0DF6               	rlf	??_Motor_Control,f
  1696     06D9                     u184:
  1697     06D9  3EFF               	addlw	-1
  1698     06DA  1D03               	skipz
  1699     06DB  2ED7               	goto	u185
  1700     06DC  0876               	movf	??_Motor_Control,w
  1701     06DD  3AFF               	xorlw	255
  1702     06DE  1283               	bcf	3,5	;RP0=0, select bank0
  1703     06DF  1303               	bcf	3,6	;RP1=0, select bank0
  1704     06E0  0586               	andwf	6,f	;volatile
  1705                           
  1706                           ;main.c: 98:         PORTB |= (1 << in2);
  1707     06E1  3001               	movlw	1
  1708     06E2  00F6               	movwf	??_Motor_Control
  1709     06E3  0A7A               	incf	Motor_Control@in2,w
  1710     06E4  2EE7               	goto	u194
  1711     06E5                     u195:
  1712     06E5  1003               	clrc
  1713     06E6  0DF6               	rlf	??_Motor_Control,f
  1714     06E7                     u194:
  1715     06E7  3EFF               	addlw	-1
  1716     06E8  1D03               	skipz
  1717     06E9  2EE5               	goto	u195
  1718     06EA  0876               	movf	??_Motor_Control,w
  1719     06EB  0486               	iorwf	6,f	;volatile
  1720                           
  1721                           ;main.c: 99:         break;
  1722     06EC  2F18               	goto	l813
  1723     06ED                     l807:
  1724                           
  1725                           ;main.c: 101:         PORTB &= ~(1 << in1);
  1726     06ED  3001               	movlw	1
  1727     06EE  00F6               	movwf	??_Motor_Control
  1728     06EF  0A79               	incf	Motor_Control@in1,w
  1729     06F0  2EF3               	goto	u204
  1730     06F1                     u205:
  1731     06F1  1003               	clrc
  1732     06F2  0DF6               	rlf	??_Motor_Control,f
  1733     06F3                     u204:
  1734     06F3  3EFF               	addlw	-1
  1735     06F4  1D03               	skipz
  1736     06F5  2EF1               	goto	u205
  1737     06F6  0876               	movf	??_Motor_Control,w
  1738     06F7  3AFF               	xorlw	255
  1739     06F8  1283               	bcf	3,5	;RP0=0, select bank0
  1740     06F9  1303               	bcf	3,6	;RP1=0, select bank0
  1741     06FA  0586               	andwf	6,f	;volatile
  1742                           
  1743                           ;main.c: 102:         PORTB &= ~(1 << in2);
  1744     06FB  3001               	movlw	1
  1745     06FC  00F6               	movwf	??_Motor_Control
  1746     06FD  0A7A               	incf	Motor_Control@in2,w
  1747     06FE  2F01               	goto	u214
  1748     06FF                     u215:
  1749     06FF  1003               	clrc
  1750     0700  0DF6               	rlf	??_Motor_Control,f
  1751     0701                     u214:
  1752     0701  3EFF               	addlw	-1
  1753     0702  1D03               	skipz
  1754     0703  2EFF               	goto	u215
  1755     0704  0876               	movf	??_Motor_Control,w
  1756     0705  3AFF               	xorlw	255
  1757     0706  0586               	andwf	6,f	;volatile
  1758                           
  1759                           ;main.c: 103:         break;
  1760     0707  2F18               	goto	l813
  1761     0708                     l811:
  1762                           
  1763                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1764                           ; Switch size 1, requested type "simple"
  1765                           ; Number of cases is 1, Range of values is 0 to 0
  1766                           ; switch strategies available:
  1767                           ; Name         Instructions Cycles
  1768                           ; simple_byte            4     3 (average)
  1769                           ; direct_byte           11     8 (fixed)
  1770                           ; jumptable            260     6 (fixed)
  1771                           ;	Chosen strategy is simple_byte
  1772     0708  0873               	movf	Motor_Control@cmd+1,w
  1773     0709  3A00               	xorlw	0	; case 0
  1774     070A  1903               	skipnz
  1775     070B  2F0D               	goto	l901
  1776     070C  2F18               	goto	l813
  1777     070D                     l901:
  1778                           
  1779                           ; Switch size 1, requested type "simple"
  1780                           ; Number of cases is 3, Range of values is 1 to 3
  1781                           ; switch strategies available:
  1782                           ; Name         Instructions Cycles
  1783                           ; simple_byte           10     6 (average)
  1784                           ; direct_byte           20    11 (fixed)
  1785                           ; jumptable            263     9 (fixed)
  1786                           ;	Chosen strategy is simple_byte
  1787     070D  0872               	movf	Motor_Control@cmd,w
  1788     070E  3A01               	xorlw	1	; case 1
  1789     070F  1903               	skipnz
  1790     0710  2EB9               	goto	l803
  1791     0711  3A03               	xorlw	3	; case 2
  1792     0712  1903               	skipnz
  1793     0713  2ED3               	goto	l805
  1794     0714  3A01               	xorlw	1	; case 3
  1795     0715  1903               	skipnz
  1796     0716  2EED               	goto	l807
  1797     0717  2F18               	goto	l813
  1798     0718                     l813:
  1799                           
  1800                           ;main.c: 109:     if (speed > 0) {
  1801     0718  0875               	movf	Motor_Control@speed+1,w
  1802     0719  3A80               	xorlw	128
  1803     071A  00FF               	movwf	btemp+1
  1804     071B  3080               	movlw	128
  1805     071C  027F               	subwf	btemp+1,w
  1806     071D  1D03               	skipz
  1807     071E  2F21               	goto	u225
  1808     071F  3001               	movlw	1
  1809     0720  0274               	subwf	Motor_Control@speed,w
  1810     0721                     u225:
  1811     0721  1C03               	skipc
  1812     0722  2F24               	goto	u221
  1813     0723  2F25               	goto	u220
  1814     0724                     u221:
  1815     0724  2F40               	goto	l62
  1816     0725                     u220:
  1817     0725                     l815:
  1818                           
  1819                           ;main.c: 110:     for (int i = 0; i < speed; i++) {
  1820     0725  01F7               	clrf	Motor_Control@i
  1821     0726  01F8               	clrf	Motor_Control@i+1
  1822     0727  2F32               	goto	l70
  1823     0728                     l817:
  1824                           
  1825                           ;main.c: 111:         _delay((unsigned long)((100)*(16000000/4000000.0)));
  1826     0728  3085               	movlw	133
  1827     0729  00F6               	movwf	??_Motor_Control
  1828     072A                     u277:
  1829     072A  0BF6               	decfsz	??_Motor_Control,f
  1830     072B  2F2A               	goto	u277
  1831                           
  1832                           ;main.c: 112:         }
  1833     072C  3001               	movlw	1
  1834     072D  07F7               	addwf	Motor_Control@i,f
  1835     072E  1803               	skipnc
  1836     072F  0AF8               	incf	Motor_Control@i+1,f
  1837     0730  3000               	movlw	0
  1838     0731  07F8               	addwf	Motor_Control@i+1,f
  1839     0732                     l70:
  1840     0732  0878               	movf	Motor_Control@i+1,w
  1841     0733  3A80               	xorlw	128
  1842     0734  00F6               	movwf	??_Motor_Control
  1843     0735  0875               	movf	Motor_Control@speed+1,w
  1844     0736  3A80               	xorlw	128
  1845     0737  0276               	subwf	??_Motor_Control,w
  1846     0738  1D03               	skipz
  1847     0739  2F3C               	goto	u235
  1848     073A  0874               	movf	Motor_Control@speed,w
  1849     073B  0277               	subwf	Motor_Control@i,w
  1850     073C                     u235:
  1851     073C  1C03               	skipc
  1852     073D  2F3F               	goto	u231
  1853     073E  2F40               	goto	u230
  1854     073F                     u231:
  1855     073F  2F28               	goto	l817
  1856     0740                     u230:
  1857     0740                     l62:
  1858     0740  0008               	return
  1859     0741                     __end_of_Motor_Control:
  1860     0002                     ___latbits      equ	2
  1861     007E                     btemp           set	126	;btemp
  1862     007E                     wtemp0          set	126
  1863                           
  1864                           	psect	config
  1865                           
  1866                           ;Config register CONFIG @ 0x2007
  1867                           ;	Oscillator Selection bits
  1868                           ;	FOSC = HS, HS oscillator
  1869                           ;	Watchdog Timer Enable bit
  1870                           ;	WDTE = OFF, WDT disabled
  1871                           ;	Power-up Timer Enable bit
  1872                           ;	PWRTE = ON, PWRT enabled
  1873                           ;	Brown-out Reset Enable bit
  1874                           ;	BOREN = ON, BOR enabled
  1875                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1876                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1877                           ;	Data EEPROM Memory Code Protection bit
  1878                           ;	CPD = OFF, Data EEPROM code protection off
  1879                           ;	Flash Program Memory Write Enable bits
  1880                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1881                           ;	In-Circuit Debugger Mode bit
  1882                           ;	DEBUG = 0x1, unprogrammed default
  1883                           ;	Flash Program Memory Code Protection bit
  1884                           ;	CP = OFF, Code protection off
  1885     2007                     	org	8199
  1886     2007  3F72               	dw	16242

Data Sizes:
    Strings     173
    Constant    0
    Data        3
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      3       7
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    UART_Write_Text@text	PTR const unsigned char  size(1) Largest target is 81
		 -> STR_1(CODE[28]), STR_2(CODE[81]), STR_3(CODE[10]), STR_4(CODE[11]), 
		 -> STR_5(CODE[7]), STR_6(CODE[8]), STR_7(CODE[10]), STR_8(CODE[81]), 
		 -> STR_9(CODE[18]), 


Critical Paths under _main in COMMON

    _main->_Motor_Backward
    _main->_Motor_Forward
    _main->_Motor_Left
    _main->_Motor_Right
    _UART_Write_Text->_UART_Write
    _Motor_Stop->_Motor_Control
    _Motor_Right->_Motor_Control
    _Motor_Left->_Motor_Control
    _Motor_Forward->_Motor_Control
    _Motor_Backward->_Motor_Control

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    1772
                                             13 COMMON     1     1      0
                                              0 BANK0      3     3      0
                     _Motor_Backward
                      _Motor_Forward
                         _Motor_Init
                         _Motor_Left
                        _Motor_Right
                         _Motor_Stop
                       _UART_TX_Init
                    _UART_Write_Text
 ---------------------------------------------------------------------------------
 (1) _UART_Write_Text                                      1     0      1      69
                                              1 COMMON     1     0      1
                         _UART_Write
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           1     1      0      15
                                              0 COMMON     1     1      0
                      _UART_TX_Empty
 ---------------------------------------------------------------------------------
 (3) _UART_TX_Empty                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_TX_Init                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Motor_Stop                                           0     0      0     300
                      _Motor_Control
 ---------------------------------------------------------------------------------
 (1) _Motor_Right                                          2     0      2     345
                                             11 COMMON     2     0      2
                      _Motor_Control
 ---------------------------------------------------------------------------------
 (1) _Motor_Left                                           2     0      2     345
                                             11 COMMON     2     0      2
                      _Motor_Control
 ---------------------------------------------------------------------------------
 (1) _Motor_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Motor_Forward                                        2     0      2     345
                                             11 COMMON     2     0      2
                      _Motor_Control
 ---------------------------------------------------------------------------------
 (1) _Motor_Backward                                       2     0      2     345
                                             11 COMMON     2     0      2
                      _Motor_Control
 ---------------------------------------------------------------------------------
 (2) _Motor_Control                                       11     5      6     300
                                              0 COMMON    11     5      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Motor_Backward
     _Motor_Control
   _Motor_Forward
     _Motor_Control
   _Motor_Init
   _Motor_Left
     _Motor_Control
   _Motor_Right
     _Motor_Control
   _Motor_Stop
     _Motor_Control
   _UART_TX_Init
   _UART_Write_Text
     _UART_Write
       _UART_TX_Empty

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0       0      0.0%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BANK0               80      3       7      8.8%
BITBANK0            80      0       0      0.0%
COMMON              14     14      14    100.0%
BITCOMMON           14      0       0      0.0%
DATA                 0      0      21      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Wed Dec 25 22:52:45 2024

     Motor_Forward@speed 007B                        pc 0002                       l70 0732  
                     l62 0740                       l55 05B7                       l81 06A2  
                     l75 065C                       l84 067F                       l78 0639  
                     l87 0616                       fsr 0004                      l110 05D9  
                    l113 05AD                      l125 05F5                      l119 05C7  
                    l711 05B4                      l703 05B9                      l801 06B4  
                    l713 05C8                      l705 05B9                      l803 06B9  
                    l811 0708                      l707 05C3                      l901 070D  
                    l805 06D3                      l813 0718                      l709 05AE  
                    l815 0725                      l807 06ED                      l831 063A  
                    l823 05DA                      l817 0728                      l833 0617  
                    l825 05DB                      l841 0741                      l835 065D  
                    l827 05E7                      l851 0762                      l843 074B  
                    l837 0680                      l669 05A8                      l829 05E9  
                    l861 078D                      l853 076B                      l845 0752  
                    l839 05F6                      l871 07B3                      l863 0795  
                    l855 0773                      l847 0759                      l793 06A3  
                    l873 07BB                      l865 079E                      l857 077C  
                    l849 075F                      l795 06A9                      l867 07A6  
                    l859 0784                      l797 06AA                      l869 07AB  
                    l877 07C3                      l799 06AD                      l879 07D7  
                    u110 05C3                      u111 05C2                      u220 0725  
                    u204 06F3                      u140 06A9                      u221 0724  
                    u205 06F1                      u141 06A8                      u230 0740  
                    u214 0701                      u150 06B4                      u231 073F  
                    u215 06FF                      u151 06B3                      u240 05F5  
                    u225 0721                      u241 05F4                      u250 075F  
                    u235 073C                      u251 075E                      u164 06BF  
                    u165 06BD                      u174 06CC                      u175 06CA  
                    u184 06D9                      u185 06D7                      u194 06E7  
                    u195 06E5                      u267 07DF                      u277 072A  
                    fsr0 0004                     STR_1 005A                     STR_2 0009  
                   STR_3 009D                     STR_4 0088                     STR_5 00AF  
                   STR_6 00A7                     STR_7 0093                     STR_8 0009  
                   STR_9 0076                     _BRGH 04C2                     _CREN 00C4  
                   _RCIF 0065                     _SPEN 00C7                     _TRMT 04C1  
                   _TXEN 04C5                     _SYNC 04C4                     _main 0741  
                   btemp 007E                     start 0000  __end_of_UART_Write_Text 05F6  
       Motor_Right@speed 007B                    ?_main 0070                    _RCREG 001A  
                  _SPBRG 0099                    _PORTB 0006                    _TXREG 0019  
            ?_UART_Write 0070                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 07E9             __end_of_main 07E9  
  __end_of_Motor_Control 0741    __end_of_Motor_Forward 065D                   ??_main 0023  
                 _TRISC6 043E                   _TRISC7 043F           _Motor_Backward 0617  
             _Motor_Left 065D               _Motor_Init 05AE            ??_Motor_Right 007D  
             _Motor_Stop 05F6         ?_UART_Write_Text 0071    __end_of_UART_TX_Empty 05AE  
__end_of__initialization 07FC   __end_of_Motor_Backward 063A           __pcstackCOMMON 0070  
           __pidataBANK0 05A5      __end_of_Motor_Right 06A3               __pbssBANK0 0026  
        ?_Motor_Backward 007B               __pmaintext 0741              ?_Motor_Left 007B  
            ?_Motor_Init 0070              ?_Motor_Stop 0070             ??_UART_Write 0070  
          ?_UART_TX_Init 0070               __stringtab 0003              _Motor_Right 0680  
     __end_of_UART_Write 05C8                  __ptext1 05DA                  __ptext2 05B8  
                __ptext3 05A8                  __ptext4 05C8                  __ptext5 05F6  
                __ptext6 0680                  __ptext7 065D                  __ptext8 05AE  
                __ptext9 063A           ??_UART_TX_Init 0070     end_of_initialization 07FC  
         UART_Write@data 0070                _TRISBbits 0086      start_initialization 07E9  
       ??_Motor_Backward 007D             ??_Motor_Left 007D             ??_Motor_Init 0070  
           ??_Motor_Stop 007B     __end_of_UART_TX_Init 05DA              __pdataBANK0 0020  
          _Motor_Control 06A3            _Motor_Forward 063A                ___latbits 0002  
          __pcstackBANK0 0023       __end_of_Motor_Left 0680       __end_of_Motor_Init 05B8  
     __end_of_Motor_Stop 0617             ?_Motor_Right 007B           ?_Motor_Control 0070  
         ?_Motor_Forward 007B                __pstrings 0003            _UART_TX_Empty 05A8  
      ??_UART_Write_Text 0072              __stringbase 0008           ?_UART_TX_Empty 0070  
              main@input 007D       Motor_Control@motor 0070       Motor_Control@speed 0074  
        ??_Motor_Control 0076          ??_Motor_Forward 007D       __end_of__stringtab 0009  
               __ptext10 0617                 __ptext11 06A3             _UART_TX_Init 05C8  
    UART_Write_Text@text 0071          ??_UART_TX_Empty 0070                stringcode 0003  
             _MOTOR1_IN1 0026               _MOTOR1_IN2 0022               _MOTOR2_IN1 0021  
             _MOTOR2_IN2 0020         Motor_Control@in1 0079         Motor_Control@in2 007A  
       Motor_Control@cmd 0072          _UART_Write_Text 05DA                 stringdir 0003  
               stringtab 0003          Motor_Left@speed 007B               _UART_Write 05B8  
    Motor_Backward@speed 007B           Motor_Control@i 0077  
