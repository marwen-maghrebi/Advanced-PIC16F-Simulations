

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Wed Oct 02 17:10:57 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     8                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    14                           	dabs	1,0x7E,2
    15     0000                     
    16                           ; Generated 12/10/2023 GMT
    17                           ; 
    18                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution. Publication is not required when
    32                           ;        this file is used in an embedded application.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC16F877A Definitions
    48                           ; 
    49                           ; SFR Addresses
    50     0004                     fsr             equ	4
    51     0004                     fsr0            equ	4
    52     0000                     indf            equ	0
    53     0000                     indf0           equ	0
    54     0002                     pc              equ	2
    55     0002                     pcl             equ	2
    56     000A                     pclath          equ	10
    57     0003                     status          equ	3
    58     0000                     INDF            equ	0	;# 
    59     0001                     TMR0            equ	1	;# 
    60     0002                     PCL             equ	2	;# 
    61     0003                     STATUS          equ	3	;# 
    62     0004                     FSR             equ	4	;# 
    63     0005                     PORTA           equ	5	;# 
    64     0006                     PORTB           equ	6	;# 
    65     0007                     PORTC           equ	7	;# 
    66     0008                     PORTD           equ	8	;# 
    67     0009                     PORTE           equ	9	;# 
    68     000A                     PCLATH          equ	10	;# 
    69     000B                     INTCON          equ	11	;# 
    70     000C                     PIR1            equ	12	;# 
    71     000D                     PIR2            equ	13	;# 
    72     000E                     TMR1            equ	14	;# 
    73     000E                     TMR1L           equ	14	;# 
    74     000F                     TMR1H           equ	15	;# 
    75     0010                     T1CON           equ	16	;# 
    76     0011                     TMR2            equ	17	;# 
    77     0012                     T2CON           equ	18	;# 
    78     0013                     SSPBUF          equ	19	;# 
    79     0014                     SSPCON          equ	20	;# 
    80     0015                     CCPR1           equ	21	;# 
    81     0015                     CCPR1L          equ	21	;# 
    82     0016                     CCPR1H          equ	22	;# 
    83     0017                     CCP1CON         equ	23	;# 
    84     0018                     RCSTA           equ	24	;# 
    85     0019                     TXREG           equ	25	;# 
    86     001A                     RCREG           equ	26	;# 
    87     001B                     CCPR2           equ	27	;# 
    88     001B                     CCPR2L          equ	27	;# 
    89     001C                     CCPR2H          equ	28	;# 
    90     001D                     CCP2CON         equ	29	;# 
    91     001E                     ADRESH          equ	30	;# 
    92     001F                     ADCON0          equ	31	;# 
    93     0081                     OPTION_REG      equ	129	;# 
    94     0085                     TRISA           equ	133	;# 
    95     0086                     TRISB           equ	134	;# 
    96     0087                     TRISC           equ	135	;# 
    97     0088                     TRISD           equ	136	;# 
    98     0089                     TRISE           equ	137	;# 
    99     008C                     PIE1            equ	140	;# 
   100     008D                     PIE2            equ	141	;# 
   101     008E                     PCON            equ	142	;# 
   102     0091                     SSPCON2         equ	145	;# 
   103     0092                     PR2             equ	146	;# 
   104     0093                     SSPADD          equ	147	;# 
   105     0094                     SSPSTAT         equ	148	;# 
   106     0098                     TXSTA           equ	152	;# 
   107     0099                     SPBRG           equ	153	;# 
   108     009C                     CMCON           equ	156	;# 
   109     009D                     CVRCON          equ	157	;# 
   110     009E                     ADRESL          equ	158	;# 
   111     009F                     ADCON1          equ	159	;# 
   112     010C                     EEDATA          equ	268	;# 
   113     010D                     EEADR           equ	269	;# 
   114     010E                     EEDATH          equ	270	;# 
   115     010F                     EEADRH          equ	271	;# 
   116     018C                     EECON1          equ	396	;# 
   117     018D                     EECON2          equ	397	;# 
   118     0000                     INDF            equ	0	;# 
   119     0001                     TMR0            equ	1	;# 
   120     0002                     PCL             equ	2	;# 
   121     0003                     STATUS          equ	3	;# 
   122     0004                     FSR             equ	4	;# 
   123     0005                     PORTA           equ	5	;# 
   124     0006                     PORTB           equ	6	;# 
   125     0007                     PORTC           equ	7	;# 
   126     0008                     PORTD           equ	8	;# 
   127     0009                     PORTE           equ	9	;# 
   128     000A                     PCLATH          equ	10	;# 
   129     000B                     INTCON          equ	11	;# 
   130     000C                     PIR1            equ	12	;# 
   131     000D                     PIR2            equ	13	;# 
   132     000E                     TMR1            equ	14	;# 
   133     000E                     TMR1L           equ	14	;# 
   134     000F                     TMR1H           equ	15	;# 
   135     0010                     T1CON           equ	16	;# 
   136     0011                     TMR2            equ	17	;# 
   137     0012                     T2CON           equ	18	;# 
   138     0013                     SSPBUF          equ	19	;# 
   139     0014                     SSPCON          equ	20	;# 
   140     0015                     CCPR1           equ	21	;# 
   141     0015                     CCPR1L          equ	21	;# 
   142     0016                     CCPR1H          equ	22	;# 
   143     0017                     CCP1CON         equ	23	;# 
   144     0018                     RCSTA           equ	24	;# 
   145     0019                     TXREG           equ	25	;# 
   146     001A                     RCREG           equ	26	;# 
   147     001B                     CCPR2           equ	27	;# 
   148     001B                     CCPR2L          equ	27	;# 
   149     001C                     CCPR2H          equ	28	;# 
   150     001D                     CCP2CON         equ	29	;# 
   151     001E                     ADRESH          equ	30	;# 
   152     001F                     ADCON0          equ	31	;# 
   153     0081                     OPTION_REG      equ	129	;# 
   154     0085                     TRISA           equ	133	;# 
   155     0086                     TRISB           equ	134	;# 
   156     0087                     TRISC           equ	135	;# 
   157     0088                     TRISD           equ	136	;# 
   158     0089                     TRISE           equ	137	;# 
   159     008C                     PIE1            equ	140	;# 
   160     008D                     PIE2            equ	141	;# 
   161     008E                     PCON            equ	142	;# 
   162     0091                     SSPCON2         equ	145	;# 
   163     0092                     PR2             equ	146	;# 
   164     0093                     SSPADD          equ	147	;# 
   165     0094                     SSPSTAT         equ	148	;# 
   166     0098                     TXSTA           equ	152	;# 
   167     0099                     SPBRG           equ	153	;# 
   168     009C                     CMCON           equ	156	;# 
   169     009D                     CVRCON          equ	157	;# 
   170     009E                     ADRESL          equ	158	;# 
   171     009F                     ADCON1          equ	159	;# 
   172     010C                     EEDATA          equ	268	;# 
   173     010D                     EEADR           equ	269	;# 
   174     010E                     EEDATH          equ	270	;# 
   175     010F                     EEADRH          equ	271	;# 
   176     018C                     EECON1          equ	396	;# 
   177     018D                     EECON2          equ	397	;# 
   178     0006                     _PORTB          set	6
   179     0007                     _PORTCbits      set	7
   180     0086                     _TRISB          set	134
   181     0087                     _TRISCbits      set	135
   182                           
   183                           	psect	strings
   184     0003                     __pstrings:
   185     0003                     stringtab:
   186     0003                     __stringtab:
   187     0003                     stringcode:	
   188                           ;	String table - string pointers are 1 byte each
   189                           
   190     0003                     stringdir:
   191     0003  3000               	movlw	high stringdir
   192     0004  008A               	movwf	10
   193     0005  0804               	movf	4,w
   194     0006  0A84               	incf	4,f
   195     0007  0782               	addwf	2,f
   196     0008                     __stringbase:
   197     0008  3400               	retlw	0
   198     0009                     __end_of__stringtab:
   199     0009                     STR_2:
   200     0009  3420               	retlw	32	;' '
   201     000A  3420               	retlw	32	;' '
   202     000B  3420               	retlw	32	;' '
   203     000C  3420               	retlw	32	;' '
   204     000D  3420               	retlw	32	;' '
   205     000E  3454               	retlw	84	;'T'
   206     000F  3448               	retlw	72	;'H'
   207     0010  3449               	retlw	73	;'I'
   208     0011  344E               	retlw	78	;'N'
   209     0012  3447               	retlw	71	;'G'
   210     0013  3453               	retlw	83	;'S'
   211     0014  3420               	retlw	32	;' '
   212     0015  3420               	retlw	32	;' '
   213     0016  3420               	retlw	32	;' '
   214     0017  3420               	retlw	32	;' '
   215     0018  3420               	retlw	32	;' '
   216     0019  3400               	retlw	0
   217     001A                     STR_1:
   218     001A  3420               	retlw	32	;' '
   219     001B  3420               	retlw	32	;' '
   220     001C  3454               	retlw	84	;'T'
   221     001D  3448               	retlw	72	;'H'
   222     001E  3445               	retlw	69	;'E'
   223     001F  3420               	retlw	32	;' '
   224     0020  3445               	retlw	69	;'E'
   225     0021  344D               	retlw	77	;'M'
   226     0022  3442               	retlw	66	;'B'
   227     0023  3445               	retlw	69	;'E'
   228     0024  3444               	retlw	68	;'D'
   229     0025  3444               	retlw	68	;'D'
   230     0026  3445               	retlw	69	;'E'
   231     0027  3444               	retlw	68	;'D'
   232     0028  3420               	retlw	32	;' '
   233     0029  3420               	retlw	32	;' '
   234     002A  3400               	retlw	0
   235     002B                     STR_3:
   236     002B  342A               	retlw	42	;'*'
   237     002C  342A               	retlw	42	;'*'
   238     002D  3420               	retlw	32	;' '
   239     002E  3420               	retlw	32	;' '
   240     002F  3453               	retlw	83	;'S'
   241     0030  3455               	retlw	85	;'U'
   242     0031  3442               	retlw	66	;'B'
   243     0032  3453               	retlw	83	;'S'
   244     0033  3443               	retlw	67	;'C'
   245     0034  3449               	retlw	73	;'I'
   246     0035  3442               	retlw	66	;'B'
   247     0036  3445               	retlw	69	;'E'
   248     0037  3420               	retlw	32	;' '
   249     0038  342A               	retlw	42	;'*'
   250     0039  342A               	retlw	42	;'*'
   251     003A  3400               	retlw	0
   252     003B                     STR_4:
   253     003B  342A               	retlw	42	;'*'
   254     003C  342A               	retlw	42	;'*'
   255     003D  3420               	retlw	32	;' '
   256     003E  3420               	retlw	32	;' '
   257     003F  3420               	retlw	32	;' '
   258     0040  344C               	retlw	76	;'L'
   259     0041  3449               	retlw	73	;'I'
   260     0042  344B               	retlw	75	;'K'
   261     0043  3445               	retlw	69	;'E'
   262     0044  3420               	retlw	32	;' '
   263     0045  3420               	retlw	32	;' '
   264     0046  3420               	retlw	32	;' '
   265     0047  342A               	retlw	42	;'*'
   266     0048  342A               	retlw	42	;'*'
   267     0049  3400               	retlw	0
   268                           
   269                           	psect	cinit
   270     07FC                     start_initialization:	
   271                           ; #config settings
   272                           
   273     07FC                     __initialization:
   274     07FC                     end_of_initialization:	
   275                           ;End of C runtime variable initialization code
   276                           
   277     07FC                     __end_of__initialization:
   278     07FC  0183               	clrf	3
   279     07FD  120A  118A  2F7A   	ljmp	_main	;jump to C main() function
   280                           
   281                           	psect	cstackCOMMON
   282     0070                     __pcstackCOMMON:
   283     0070                     ?_sendCommandToLCD:
   284     0070                     ?_clearLCD:	
   285                           ; 1 bytes @ 0x0
   286                           
   287     0070                     ?_sendDataToLCD:	
   288                           ; 1 bytes @ 0x0
   289                           
   290     0070                     ?_moveCursorToPosition:	
   291                           ; 1 bytes @ 0x0
   292                           
   293     0070                     ?_main:	
   294                           ; 1 bytes @ 0x0
   295                           
   296     0070                     ??_sendCommandToLCD:	
   297                           ; 2 bytes @ 0x0
   298                           
   299     0070                     ??_sendDataToLCD:	
   300                           ; 1 bytes @ 0x0
   301                           
   302                           
   303                           ; 1 bytes @ 0x0
   304     0070                     	ds	1
   305     0071                     sendCommandToLCD@command:
   306     0071                     sendDataToLCD@data:	
   307                           ; 1 bytes @ 0x1
   308                           
   309                           
   310                           ; 1 bytes @ 0x1
   311     0071                     	ds	1
   312     0072                     ?_printToLCD:
   313     0072                     printToLCD@string:	
   314                           ; 1 bytes @ 0x2
   315                           
   316     0072                     moveCursorToPosition@address:	
   317                           ; 1 bytes @ 0x2
   318                           
   319     0072                     ??_clearLCD:	
   320                           ; 1 bytes @ 0x2
   321                           
   322     0072                     ??_moveCursorToPosition:	
   323                           ; 1 bytes @ 0x2
   324                           
   325                           
   326                           ; 1 bytes @ 0x2
   327     0072                     	ds	1
   328     0073                     ??_printToLCD:
   329                           
   330                           ; 1 bytes @ 0x3
   331     0073                     	ds	1
   332     0074                     ??_main:
   333                           
   334                           ; 1 bytes @ 0x4
   335     0074                     	ds	3
   336                           
   337                           	psect	maintext
   338     077A                     __pmaintext:	
   339 ;;
   340 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   341 ;;
   342 ;; *************** function _main *****************
   343 ;; Defined at:
   344 ;;		line 102 in file "newmain.c"
   345 ;; Parameters:    Size  Location     Type
   346 ;;		None
   347 ;; Auto vars:     Size  Location     Type
   348 ;;		None
   349 ;; Return value:  Size  Location     Type
   350 ;;                  2   45[None  ] int 
   351 ;; Registers used:
   352 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   353 ;; Tracked objects:
   354 ;;		On entry : B00/0
   355 ;;		On exit  : 0/0
   356 ;;		Unchanged: 0/0
   357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   358 ;;      Params:         0       0       0       0       0
   359 ;;      Locals:         0       0       0       0       0
   360 ;;      Temps:          3       0       0       0       0
   361 ;;      Totals:         3       0       0       0       0
   362 ;;Total ram usage:        3 bytes
   363 ;; Hardware stack levels required when called: 2
   364 ;; This function calls:
   365 ;;		_clearLCD
   366 ;;		_moveCursorToPosition
   367 ;;		_printToLCD
   368 ;;		_sendCommandToLCD
   369 ;; This function is called by:
   370 ;;		Startup code after reset
   371 ;; This function uses a non-reentrant model
   372 ;;
   373                           
   374     077A                     _main:	
   375                           ;psect for function _main
   376                           
   377     077A                     l701:	
   378                           ;incstack = 0
   379                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   380                           
   381                           
   382                           ;newmain.c: 104:     TRISCbits.TRISC1 = 0;
   383     077A  1683               	bsf	3,5	;RP0=1, select bank1
   384     077B  1303               	bcf	3,6	;RP1=0, select bank1
   385     077C  1087               	bcf	7,1	;volatile
   386                           
   387                           ;newmain.c: 105:     TRISCbits.TRISC0 = 0;
   388     077D  1007               	bcf	7,0	;volatile
   389     077E                     l703:
   390                           
   391                           ;newmain.c: 106:     TRISB = 0;
   392     077E  0186               	clrf	6	;volatile
   393     077F                     l705:
   394                           
   395                           ;newmain.c: 109:     PORTCbits.RC1 = 0;
   396     077F  1283               	bcf	3,5	;RP0=0, select bank0
   397     0780  1303               	bcf	3,6	;RP1=0, select bank0
   398     0781  1087               	bcf	7,1	;volatile
   399     0782                     l707:
   400                           
   401                           ;newmain.c: 110:     PORTCbits.RC0 = 0;
   402     0782  1007               	bcf	7,0	;volatile
   403                           
   404                           ;newmain.c: 111:     PORTB = 0;
   405     0783  0186               	clrf	6	;volatile
   406     0784                     l709:
   407                           
   408                           ;newmain.c: 113:     _delay((unsigned long)((10)*(10000000UL/4000.0)));
   409     0784  3021               	movlw	33
   410     0785  00F5               	movwf	??_main+1
   411     0786  3076               	movlw	118
   412     0787  00F4               	movwf	??_main
   413     0788                     u77:
   414     0788  0BF4               	decfsz	??_main,f
   415     0789  2F88               	goto	u77
   416     078A  0BF5               	decfsz	??_main+1,f
   417     078B  2F88               	goto	u77
   418     078C  0000               	nop
   419     078D                     l711:
   420                           
   421                           ;newmain.c: 116:     sendCommandToLCD(0x38);
   422     078D  3038               	movlw	56
   423     078E  120A  118A  2714  120A  118A  	fcall	_sendCommandToLCD
   424     0793                     l713:
   425                           
   426                           ;newmain.c: 117:     sendCommandToLCD(0x0F);
   427     0793  300F               	movlw	15
   428     0794  120A  118A  2714  120A  118A  	fcall	_sendCommandToLCD
   429     0799                     l715:
   430                           
   431                           ;newmain.c: 118:     sendCommandToLCD(0x06);
   432     0799  3006               	movlw	6
   433     079A  120A  118A  2714  120A  118A  	fcall	_sendCommandToLCD
   434     079F                     l717:
   435                           
   436                           ;newmain.c: 119:     sendCommandToLCD(0x01);
   437     079F  3001               	movlw	1
   438     07A0  120A  118A  2714  120A  118A  	fcall	_sendCommandToLCD
   439     07A5                     l719:
   440                           
   441                           ;newmain.c: 124:         moveCursorToPosition(0x80);
   442     07A5  3080               	movlw	128
   443     07A6  120A  118A  275A  120A  118A  	fcall	_moveCursorToPosition
   444     07AB                     l721:
   445                           
   446                           ;newmain.c: 125:         printToLCD("  THE EMBEDDED  ");
   447     07AB  3012               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   448     07AC  00F2               	movwf	printToLCD@string
   449     07AD  120A  118A  273E  120A  118A  	fcall	_printToLCD
   450     07B2                     l723:
   451                           
   452                           ;newmain.c: 127:         moveCursorToPosition(0xC0);
   453     07B2  30C0               	movlw	192
   454     07B3  120A  118A  275A  120A  118A  	fcall	_moveCursorToPosition
   455     07B8                     l725:
   456                           
   457                           ;newmain.c: 128:         printToLCD("     THINGS     ");
   458     07B8  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   459     07B9  00F2               	movwf	printToLCD@string
   460     07BA  120A  118A  273E  120A  118A  	fcall	_printToLCD
   461     07BF                     l727:
   462                           
   463                           ;newmain.c: 129:         _delay((unsigned long)((2000)*(10000000UL/4000.0)));
   464     07BF  301A               	movlw	26
   465     07C0  00F6               	movwf	??_main+2
   466     07C1  305E               	movlw	94
   467     07C2  00F5               	movwf	??_main+1
   468     07C3  306E               	movlw	110
   469     07C4  00F4               	movwf	??_main
   470     07C5                     u87:
   471     07C5  0BF4               	decfsz	??_main,f
   472     07C6  2FC5               	goto	u87
   473     07C7  0BF5               	decfsz	??_main+1,f
   474     07C8  2FC5               	goto	u87
   475     07C9  0BF6               	decfsz	??_main+2,f
   476     07CA  2FC5               	goto	u87
   477     07CB  0000               	nop
   478     07CC                     l729:
   479                           
   480                           ;newmain.c: 131:         clearLCD();
   481     07CC  120A  118A  2704  120A  118A  	fcall	_clearLCD
   482     07D1                     l731:
   483                           
   484                           ;newmain.c: 133:         moveCursorToPosition(0x80);
   485     07D1  3080               	movlw	128
   486     07D2  120A  118A  275A  120A  118A  	fcall	_moveCursorToPosition
   487     07D7                     l733:
   488                           
   489                           ;newmain.c: 134:         printToLCD("**  SUBSCIBE **");
   490     07D7  3023               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   491     07D8  00F2               	movwf	printToLCD@string
   492     07D9  120A  118A  273E  120A  118A  	fcall	_printToLCD
   493     07DE                     l735:
   494                           
   495                           ;newmain.c: 136:         moveCursorToPosition(0xC0);
   496     07DE  30C0               	movlw	192
   497     07DF  120A  118A  275A  120A  118A  	fcall	_moveCursorToPosition
   498     07E4                     l737:
   499                           
   500                           ;newmain.c: 137:         printToLCD("**   LIKE   **");
   501     07E4  3033               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   502     07E5  00F2               	movwf	printToLCD@string
   503     07E6  120A  118A  273E  120A  118A  	fcall	_printToLCD
   504     07EB                     l739:
   505                           
   506                           ;newmain.c: 138:         _delay((unsigned long)((2000)*(10000000UL/4000.0)));
   507     07EB  301A               	movlw	26
   508     07EC  00F6               	movwf	??_main+2
   509     07ED  305E               	movlw	94
   510     07EE  00F5               	movwf	??_main+1
   511     07EF  306E               	movlw	110
   512     07F0  00F4               	movwf	??_main
   513     07F1                     u97:
   514     07F1  0BF4               	decfsz	??_main,f
   515     07F2  2FF1               	goto	u97
   516     07F3  0BF5               	decfsz	??_main+1,f
   517     07F4  2FF1               	goto	u97
   518     07F5  0BF6               	decfsz	??_main+2,f
   519     07F6  2FF1               	goto	u97
   520     07F7  0000               	nop
   521     07F8  2FA5               	goto	l719
   522     07F9  120A  118A  2800   	ljmp	start
   523     07FC                     __end_of_main:
   524                           
   525                           	psect	text1
   526     073E                     __ptext1:	
   527 ;; *************** function _printToLCD *****************
   528 ;; Defined at:
   529 ;;		line 86 in file "newmain.c"
   530 ;; Parameters:    Size  Location     Type
   531 ;;  string          1    2[COMMON] PTR const unsigned char 
   532 ;;		 -> STR_4(15), STR_3(16), STR_2(17), STR_1(17), 
   533 ;; Auto vars:     Size  Location     Type
   534 ;;		None
   535 ;; Return value:  Size  Location     Type
   536 ;;                  1    wreg      void 
   537 ;; Registers used:
   538 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   539 ;; Tracked objects:
   540 ;;		On entry : 0/0
   541 ;;		On exit  : 0/0
   542 ;;		Unchanged: 0/0
   543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   544 ;;      Params:         1       0       0       0       0
   545 ;;      Locals:         0       0       0       0       0
   546 ;;      Temps:          0       0       0       0       0
   547 ;;      Totals:         1       0       0       0       0
   548 ;;Total ram usage:        1 bytes
   549 ;; Hardware stack levels used: 1
   550 ;; Hardware stack levels required when called: 1
   551 ;; This function calls:
   552 ;;		_sendDataToLCD
   553 ;; This function is called by:
   554 ;;		_main
   555 ;; This function uses a non-reentrant model
   556 ;;
   557                           
   558     073E                     _printToLCD:	
   559                           ;psect for function _printToLCD
   560                           
   561     073E                     l693:	
   562                           ;incstack = 0
   563                           ; Regs used in _printToLCD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   564                           
   565                           
   566                           ;newmain.c: 87:     while(*string) {
   567     073E  2F4D               	goto	l699
   568     073F                     l695:
   569                           
   570                           ;newmain.c: 88:         sendDataToLCD(*string++);
   571     073F  0872               	movf	printToLCD@string,w
   572     0740  0084               	movwf	4
   573     0741  120A  118A  2003  120A  118A  	fcall	stringdir
   574     0746  120A  118A  2729  120A  118A  	fcall	_sendDataToLCD
   575     074B                     l697:
   576     074B  3001               	movlw	1
   577     074C  07F2               	addwf	printToLCD@string,f
   578     074D                     l699:
   579                           
   580                           ;newmain.c: 87:     while(*string) {
   581     074D  0872               	movf	printToLCD@string,w
   582     074E  0084               	movwf	4
   583     074F  120A  118A  2003  120A  118A  	fcall	stringdir
   584     0754  3A00               	xorlw	0
   585     0755  1D03               	skipz
   586     0756  2F58               	goto	u61
   587     0757  2F59               	goto	u60
   588     0758                     u61:
   589     0758  2F3F               	goto	l695
   590     0759                     u60:
   591     0759                     l32:
   592     0759  0008               	return
   593     075A                     __end_of_printToLCD:
   594                           
   595                           	psect	text2
   596     0729                     __ptext2:	
   597 ;; *************** function _sendDataToLCD *****************
   598 ;; Defined at:
   599 ;;		line 77 in file "newmain.c"
   600 ;; Parameters:    Size  Location     Type
   601 ;;  data            1    wreg     unsigned char 
   602 ;; Auto vars:     Size  Location     Type
   603 ;;  data            1    1[COMMON] unsigned char 
   604 ;; Return value:  Size  Location     Type
   605 ;;                  1    wreg      void 
   606 ;; Registers used:
   607 ;;		wreg
   608 ;; Tracked objects:
   609 ;;		On entry : 0/0
   610 ;;		On exit  : 0/0
   611 ;;		Unchanged: 0/0
   612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   613 ;;      Params:         0       0       0       0       0
   614 ;;      Locals:         1       0       0       0       0
   615 ;;      Temps:          1       0       0       0       0
   616 ;;      Totals:         2       0       0       0       0
   617 ;;Total ram usage:        2 bytes
   618 ;; Hardware stack levels used: 1
   619 ;; This function calls:
   620 ;;		Nothing
   621 ;; This function is called by:
   622 ;;		_printToLCD
   623 ;; This function uses a non-reentrant model
   624 ;;
   625                           
   626     0729                     _sendDataToLCD:	
   627                           ;psect for function _sendDataToLCD
   628                           
   629                           
   630                           ;incstack = 0
   631                           ; Regs used in _sendDataToLCD: [wreg]
   632                           ;sendDataToLCD@data stored from wreg
   633     0729  00F1               	movwf	sendDataToLCD@data
   634     072A                     l601:
   635                           
   636                           ;newmain.c: 78:     PORTCbits.RC0 = 1;
   637     072A  1283               	bcf	3,5	;RP0=0, select bank0
   638     072B  1303               	bcf	3,6	;RP1=0, select bank0
   639     072C  1407               	bsf	7,0	;volatile
   640     072D                     l603:
   641                           
   642                           ;newmain.c: 79:     PORTB = data;
   643     072D  0871               	movf	sendDataToLCD@data,w
   644     072E  0086               	movwf	6	;volatile
   645     072F                     l605:
   646                           
   647                           ;newmain.c: 80:     PORTCbits.RC1 = 1;
   648     072F  1487               	bsf	7,1	;volatile
   649                           
   650                           ;newmain.c: 81:     _delay((unsigned long)((200)*(10000000UL/4000000.0)));
   651     0730  30A6               	movlw	166
   652     0731  00F0               	movwf	??_sendDataToLCD
   653     0732                     u107:
   654     0732  0BF0               	decfsz	??_sendDataToLCD,f
   655     0733  2F32               	goto	u107
   656     0734  0000               	nop
   657     0735                     l607:
   658                           
   659                           ;newmain.c: 82:     PORTCbits.RC1 = 0;
   660     0735  1283               	bcf	3,5	;RP0=0, select bank0
   661     0736  1303               	bcf	3,6	;RP1=0, select bank0
   662     0737  1087               	bcf	7,1	;volatile
   663                           
   664                           ;newmain.c: 83:     _delay((unsigned long)((200)*(10000000UL/4000000.0)));
   665     0738  30A6               	movlw	166
   666     0739  00F0               	movwf	??_sendDataToLCD
   667     073A                     u117:
   668     073A  0BF0               	decfsz	??_sendDataToLCD,f
   669     073B  2F3A               	goto	u117
   670     073C  0000               	nop
   671     073D                     l26:
   672     073D  0008               	return
   673     073E                     __end_of_sendDataToLCD:
   674                           
   675                           	psect	text3
   676     075A                     __ptext3:	
   677 ;; *************** function _moveCursorToPosition *****************
   678 ;; Defined at:
   679 ;;		line 92 in file "newmain.c"
   680 ;; Parameters:    Size  Location     Type
   681 ;;  address         1    wreg     unsigned char 
   682 ;; Auto vars:     Size  Location     Type
   683 ;;  address         1    2[COMMON] unsigned char 
   684 ;; Return value:  Size  Location     Type
   685 ;;                  1    wreg      unsigned char 
   686 ;; Registers used:
   687 ;;		wreg, status,2, status,0, pclath, cstack
   688 ;; Tracked objects:
   689 ;;		On entry : 0/0
   690 ;;		On exit  : 0/0
   691 ;;		Unchanged: 0/0
   692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   693 ;;      Params:         0       0       0       0       0
   694 ;;      Locals:         1       0       0       0       0
   695 ;;      Temps:          0       0       0       0       0
   696 ;;      Totals:         1       0       0       0       0
   697 ;;Total ram usage:        1 bytes
   698 ;; Hardware stack levels used: 1
   699 ;; Hardware stack levels required when called: 1
   700 ;; This function calls:
   701 ;;		_sendCommandToLCD
   702 ;; This function is called by:
   703 ;;		_main
   704 ;; This function uses a non-reentrant model
   705 ;;
   706                           
   707     075A                     _moveCursorToPosition:	
   708                           ;psect for function _moveCursorToPosition
   709                           
   710                           
   711                           ;incstack = 0
   712                           ; Regs used in _moveCursorToPosition: [wreg+status,2+status,0+pclath+cstack]
   713                           ;moveCursorToPosition@address stored from wreg
   714     075A  00F2               	movwf	moveCursorToPosition@address
   715     075B                     l621:
   716                           
   717                           ;newmain.c: 94:     if ((address >= 0x80 && address <= 0xA8) || (address >= 0xC0 && addr
      +                          ess <= 0xE8)) {
   718     075B  3080               	movlw	128
   719     075C  0272               	subwf	moveCursorToPosition@address,w
   720     075D  1C03               	skipc
   721     075E  2F60               	goto	u21
   722     075F  2F61               	goto	u20
   723     0760                     u21:
   724     0760  2F67               	goto	l625
   725     0761                     u20:
   726     0761                     l623:
   727     0761  30A9               	movlw	169
   728     0762  0272               	subwf	moveCursorToPosition@address,w
   729     0763  1C03               	skipc
   730     0764  2F66               	goto	u31
   731     0765  2F67               	goto	u30
   732     0766                     u31:
   733     0766  2F73               	goto	l629
   734     0767                     u30:
   735     0767                     l625:
   736     0767  30C0               	movlw	192
   737     0768  0272               	subwf	moveCursorToPosition@address,w
   738     0769  1C03               	skipc
   739     076A  2F6C               	goto	u41
   740     076B  2F6D               	goto	u40
   741     076C                     u41:
   742     076C  2F79               	goto	l40
   743     076D                     u40:
   744     076D                     l627:
   745     076D  30E9               	movlw	233
   746     076E  0272               	subwf	moveCursorToPosition@address,w
   747     076F  1803               	skipnc
   748     0770  2F72               	goto	u51
   749     0771  2F73               	goto	u50
   750     0772                     u51:
   751     0772  2F79               	goto	l40
   752     0773                     u50:
   753     0773                     l629:
   754                           
   755                           ;newmain.c: 95:         sendCommandToLCD(address);
   756     0773  0872               	movf	moveCursorToPosition@address,w
   757     0774  120A  118A  2714  120A  118A  	fcall	_sendCommandToLCD
   758     0779                     l40:
   759     0779  0008               	return
   760     077A                     __end_of_moveCursorToPosition:
   761                           
   762                           	psect	text4
   763     0704                     __ptext4:	
   764 ;; *************** function _clearLCD *****************
   765 ;; Defined at:
   766 ;;		line 63 in file "newmain.c"
   767 ;; Parameters:    Size  Location     Type
   768 ;;		None
   769 ;; Auto vars:     Size  Location     Type
   770 ;;		None
   771 ;; Return value:  Size  Location     Type
   772 ;;                  1    wreg      void 
   773 ;; Registers used:
   774 ;;		wreg, status,2, status,0, pclath, cstack
   775 ;; Tracked objects:
   776 ;;		On entry : 0/0
   777 ;;		On exit  : 0/0
   778 ;;		Unchanged: 0/0
   779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   780 ;;      Params:         0       0       0       0       0
   781 ;;      Locals:         0       0       0       0       0
   782 ;;      Temps:          2       0       0       0       0
   783 ;;      Totals:         2       0       0       0       0
   784 ;;Total ram usage:        2 bytes
   785 ;; Hardware stack levels used: 1
   786 ;; Hardware stack levels required when called: 1
   787 ;; This function calls:
   788 ;;		_sendCommandToLCD
   789 ;; This function is called by:
   790 ;;		_main
   791 ;;		_initializeLCD
   792 ;; This function uses a non-reentrant model
   793 ;;
   794                           
   795     0704                     _clearLCD:	
   796                           ;psect for function _clearLCD
   797                           
   798     0704                     l609:	
   799                           ;incstack = 0
   800                           ; Regs used in _clearLCD: [wreg+status,2+status,0+pclath+cstack]
   801                           
   802                           
   803                           ;newmain.c: 64:     sendCommandToLCD(0x01);
   804     0704  3001               	movlw	1
   805     0705  120A  118A  2714  120A  118A  	fcall	_sendCommandToLCD
   806     070A                     l611:
   807                           
   808                           ;newmain.c: 65:     _delay((unsigned long)((3)*(10000000UL/4000.0)));
   809     070A  300A               	movlw	10
   810     070B  00F3               	movwf	??_clearLCD+1
   811     070C  30BC               	movlw	188
   812     070D  00F2               	movwf	??_clearLCD
   813     070E                     u127:
   814     070E  0BF2               	decfsz	??_clearLCD,f
   815     070F  2F0E               	goto	u127
   816     0710  0BF3               	decfsz	??_clearLCD+1,f
   817     0711  2F0E               	goto	u127
   818     0712  0000               	nop
   819     0713                     l20:
   820     0713  0008               	return
   821     0714                     __end_of_clearLCD:
   822                           
   823                           	psect	text5
   824     0714                     __ptext5:	
   825 ;; *************** function _sendCommandToLCD *****************
   826 ;; Defined at:
   827 ;;		line 68 in file "newmain.c"
   828 ;; Parameters:    Size  Location     Type
   829 ;;  command         1    wreg     unsigned char 
   830 ;; Auto vars:     Size  Location     Type
   831 ;;  command         1    1[COMMON] unsigned char 
   832 ;; Return value:  Size  Location     Type
   833 ;;                  1    wreg      void 
   834 ;; Registers used:
   835 ;;		wreg
   836 ;; Tracked objects:
   837 ;;		On entry : 0/0
   838 ;;		On exit  : 0/0
   839 ;;		Unchanged: 0/0
   840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   841 ;;      Params:         0       0       0       0       0
   842 ;;      Locals:         1       0       0       0       0
   843 ;;      Temps:          1       0       0       0       0
   844 ;;      Totals:         2       0       0       0       0
   845 ;;Total ram usage:        2 bytes
   846 ;; Hardware stack levels used: 1
   847 ;; This function calls:
   848 ;;		Nothing
   849 ;; This function is called by:
   850 ;;		_clearLCD
   851 ;;		_moveCursorToPosition
   852 ;;		_main
   853 ;;		_initializeLCD
   854 ;; This function uses a non-reentrant model
   855 ;;
   856                           
   857     0714                     _sendCommandToLCD:	
   858                           ;psect for function _sendCommandToLCD
   859                           
   860                           
   861                           ;incstack = 0
   862                           ; Regs used in _sendCommandToLCD: [wreg]
   863                           ;sendCommandToLCD@command stored from wreg
   864     0714  00F1               	movwf	sendCommandToLCD@command
   865     0715                     l593:
   866                           
   867                           ;newmain.c: 69:     PORTCbits.RC0 = 0;
   868     0715  1283               	bcf	3,5	;RP0=0, select bank0
   869     0716  1303               	bcf	3,6	;RP1=0, select bank0
   870     0717  1007               	bcf	7,0	;volatile
   871     0718                     l595:
   872                           
   873                           ;newmain.c: 70:     PORTB = command;
   874     0718  0871               	movf	sendCommandToLCD@command,w
   875     0719  0086               	movwf	6	;volatile
   876     071A                     l597:
   877                           
   878                           ;newmain.c: 71:     PORTCbits.RC1 = 1;
   879     071A  1487               	bsf	7,1	;volatile
   880                           
   881                           ;newmain.c: 72:     _delay((unsigned long)((200)*(10000000UL/4000000.0)));
   882     071B  30A6               	movlw	166
   883     071C  00F0               	movwf	??_sendCommandToLCD
   884     071D                     u137:
   885     071D  0BF0               	decfsz	??_sendCommandToLCD,f
   886     071E  2F1D               	goto	u137
   887     071F  0000               	nop
   888     0720                     l599:
   889                           
   890                           ;newmain.c: 73:     PORTCbits.RC1 = 0;
   891     0720  1283               	bcf	3,5	;RP0=0, select bank0
   892     0721  1303               	bcf	3,6	;RP1=0, select bank0
   893     0722  1087               	bcf	7,1	;volatile
   894                           
   895                           ;newmain.c: 74:     _delay((unsigned long)((200)*(10000000UL/4000000.0)));
   896     0723  30A6               	movlw	166
   897     0724  00F0               	movwf	??_sendCommandToLCD
   898     0725                     u147:
   899     0725  0BF0               	decfsz	??_sendCommandToLCD,f
   900     0726  2F25               	goto	u147
   901     0727  0000               	nop
   902     0728                     l23:
   903     0728  0008               	return
   904     0729                     __end_of_sendCommandToLCD:
   905     0002                     ___latbits      equ	2
   906     007E                     btemp           set	126	;btemp
   907     007E                     wtemp0          set	126
   908                           
   909                           	psect	config
   910                           
   911                           ;Config register CONFIG @ 0x2007
   912                           ;	Oscillator Selection bits
   913                           ;	FOSC = HS, HS oscillator
   914                           ;	Watchdog Timer Enable bit
   915                           ;	WDTE = OFF, WDT disabled
   916                           ;	Power-up Timer Enable bit
   917                           ;	PWRTE = OFF, PWRT disabled
   918                           ;	Brown-out Reset Enable bit
   919                           ;	BOREN = ON, BOR enabled
   920                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   921                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   922                           ;	Data EEPROM Memory Code Protection bit
   923                           ;	CPD = OFF, Data EEPROM code protection off
   924                           ;	Flash Program Memory Write Enable bits
   925                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   926                           ;	In-Circuit Debugger Mode bit
   927                           ;	DEBUG = 0x1, unprogrammed default
   928                           ;	Flash Program Memory Code Protection bit
   929                           ;	CP = OFF, Code protection off
   930     2007                     	org	8199
   931     2007  3F7A               	dw	16250

Data Sizes:
    Strings     65
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       7
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    printToLCD@string	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_1(CODE[17]), STR_2(CODE[17]), STR_3(CODE[16]), STR_4(CODE[15]), 


Critical Paths under _main in COMMON

    _main->_clearLCD
    _printToLCD->_sendDataToLCD
    _moveCursorToPosition->_sendCommandToLCD
    _clearLCD->_sendCommandToLCD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     184
                                              4 COMMON     3     3      0
                           _clearLCD
               _moveCursorToPosition
                         _printToLCD
                   _sendCommandToLCD
 ---------------------------------------------------------------------------------
 (1) _printToLCD                                           1     0      1      64
                                              2 COMMON     1     0      1
                      _sendDataToLCD
 ---------------------------------------------------------------------------------
 (2) _sendDataToLCD                                        2     2      0      15
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _moveCursorToPosition                                 1     1      0      90
                                              2 COMMON     1     1      0
                   _sendCommandToLCD
 ---------------------------------------------------------------------------------
 (1) _clearLCD                                             2     2      0      15
                                              2 COMMON     2     2      0
                   _sendCommandToLCD
 ---------------------------------------------------------------------------------
 (1) _sendCommandToLCD                                     2     2      0      15
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clearLCD
     _sendCommandToLCD
   _moveCursorToPosition
     _sendCommandToLCD
   _printToLCD
     _sendDataToLCD
   _sendCommandToLCD

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14      7       7     50.0%
BANK0               80      0       0      0.0%
BANK1               80      0       0      0.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0       7      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Wed Oct 02 17:10:57 2024

                           pc 0002                            l20 0713                            l23 0728  
                          l40 0779                            l32 0759                            l26 073D  
                          u20 0761                            u21 0760                            u30 0767  
                          u31 0766                            u40 076D                            u41 076C  
                          u50 0773                            u51 0772                            u60 0759  
                          u61 0758                            u77 0788                            u87 07C5  
                          u97 07F1                            fsr 0004                           l601 072A  
                         l611 070A                           l603 072D                           l621 075B  
                         l605 072F                           l701 077A                           l623 0761  
                         l607 0735                           l711 078D                           l703 077E  
                         l609 0704                           l625 0767                           l721 07AB  
                         l713 0793                           l705 077F                           l627 076D  
                         l731 07D1                           l723 07B2                           l715 0799  
                         l707 0782                           l629 0773                           l733 07D7  
                         l725 07B8                           l717 079F                           l709 0784  
                         l735 07DE                           l727 07BF                           l719 07A5  
                         l593 0715                           l737 07E4                           l729 07CC  
                         l595 0718                           l739 07EB                           l597 071A  
                         l693 073E                           l599 0720                           l695 073F  
                         l697 074B                           l699 074D         __end_of_sendDataToLCD 073E  
                         u107 0732                           u117 073A                           u127 070E  
                         u137 071D                           u147 0725                           fsr0 0004  
                        STR_1 001A                          STR_2 0009                          STR_3 002B  
                        STR_4 003B                          _main 077A                          btemp 007E  
                        start 0000         ?_moveCursorToPosition 0070                         ?_main 0070  
                       _PORTB 0006                         _TRISB 0086             sendDataToLCD@data 0071  
                       pclath 000A                         status 0003                         wtemp0 007E  
             __initialization 07FC                  __end_of_main 07FC                        ??_main 0074  
      ??_moveCursorToPosition 0072              _sendCommandToLCD 0714              __end_of_clearLCD 0714  
     __end_of__initialization 07FC              printToLCD@string 0072                __pcstackCOMMON 0070  
                  __pmaintext 077A                     ?_clearLCD 0070                    __stringtab 0003  
                     __ptext1 073E                       __ptext2 0729                       __ptext3 075A  
                     __ptext4 0704                       __ptext5 0714      __end_of_sendCommandToLCD 0729  
                  ??_clearLCD 0072          end_of_initialization 07FC   moveCursorToPosition@address 0072  
                  _printToLCD 073E                     _PORTCbits 0007                 _sendDataToLCD 0729  
                   _TRISCbits 0087                ?_sendDataToLCD 0070           start_initialization 07FC  
     sendCommandToLCD@command 0071                   ?_printToLCD 0072                     ___latbits 0002  
             ??_sendDataToLCD 0070                     __pstrings 0003             ?_sendCommandToLCD 0070  
          ??_sendCommandToLCD 0070                   __stringbase 0008            __end_of__stringtab 0009  
__end_of_moveCursorToPosition 077A                      _clearLCD 0704                  ??_printToLCD 0073  
          __end_of_printToLCD 075A                     stringcode 0003                      stringdir 0003  
                    stringtab 0003          _moveCursorToPosition 075A  
