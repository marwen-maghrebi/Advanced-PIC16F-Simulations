

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Sun Dec 01 12:01:30 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     7                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
     8                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
     9                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    14                           	dabs	1,0x7E,2
    15     0000                     
    16                           ; Generated 12/10/2023 GMT
    17                           ; 
    18                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution. Publication is not required when
    32                           ;        this file is used in an embedded application.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC16F877A Definitions
    48                           ; 
    49                           ; SFR Addresses
    50     0004                     fsr             equ	4
    51     0004                     fsr0            equ	4
    52     0000                     indf            equ	0
    53     0000                     indf0           equ	0
    54     0002                     pc              equ	2
    55     0002                     pcl             equ	2
    56     000A                     pclath          equ	10
    57     0003                     status          equ	3
    58     0000                     INDF            equ	0	;# 
    59     0001                     TMR0            equ	1	;# 
    60     0002                     PCL             equ	2	;# 
    61     0003                     STATUS          equ	3	;# 
    62     0004                     FSR             equ	4	;# 
    63     0005                     PORTA           equ	5	;# 
    64     0006                     PORTB           equ	6	;# 
    65     0007                     PORTC           equ	7	;# 
    66     0008                     PORTD           equ	8	;# 
    67     0009                     PORTE           equ	9	;# 
    68     000A                     PCLATH          equ	10	;# 
    69     000B                     INTCON          equ	11	;# 
    70     000C                     PIR1            equ	12	;# 
    71     000D                     PIR2            equ	13	;# 
    72     000E                     TMR1            equ	14	;# 
    73     000E                     TMR1L           equ	14	;# 
    74     000F                     TMR1H           equ	15	;# 
    75     0010                     T1CON           equ	16	;# 
    76     0011                     TMR2            equ	17	;# 
    77     0012                     T2CON           equ	18	;# 
    78     0013                     SSPBUF          equ	19	;# 
    79     0014                     SSPCON          equ	20	;# 
    80     0015                     CCPR1           equ	21	;# 
    81     0015                     CCPR1L          equ	21	;# 
    82     0016                     CCPR1H          equ	22	;# 
    83     0017                     CCP1CON         equ	23	;# 
    84     0018                     RCSTA           equ	24	;# 
    85     0019                     TXREG           equ	25	;# 
    86     001A                     RCREG           equ	26	;# 
    87     001B                     CCPR2           equ	27	;# 
    88     001B                     CCPR2L          equ	27	;# 
    89     001C                     CCPR2H          equ	28	;# 
    90     001D                     CCP2CON         equ	29	;# 
    91     001E                     ADRESH          equ	30	;# 
    92     001F                     ADCON0          equ	31	;# 
    93     0081                     OPTION_REG      equ	129	;# 
    94     0085                     TRISA           equ	133	;# 
    95     0086                     TRISB           equ	134	;# 
    96     0087                     TRISC           equ	135	;# 
    97     0088                     TRISD           equ	136	;# 
    98     0089                     TRISE           equ	137	;# 
    99     008C                     PIE1            equ	140	;# 
   100     008D                     PIE2            equ	141	;# 
   101     008E                     PCON            equ	142	;# 
   102     0091                     SSPCON2         equ	145	;# 
   103     0092                     PR2             equ	146	;# 
   104     0093                     SSPADD          equ	147	;# 
   105     0094                     SSPSTAT         equ	148	;# 
   106     0098                     TXSTA           equ	152	;# 
   107     0099                     SPBRG           equ	153	;# 
   108     009C                     CMCON           equ	156	;# 
   109     009D                     CVRCON          equ	157	;# 
   110     009E                     ADRESL          equ	158	;# 
   111     009F                     ADCON1          equ	159	;# 
   112     010C                     EEDATA          equ	268	;# 
   113     010D                     EEADR           equ	269	;# 
   114     010E                     EEDATH          equ	270	;# 
   115     010F                     EEADRH          equ	271	;# 
   116     018C                     EECON1          equ	396	;# 
   117     018D                     EECON2          equ	397	;# 
   118     0000                     INDF            equ	0	;# 
   119     0001                     TMR0            equ	1	;# 
   120     0002                     PCL             equ	2	;# 
   121     0003                     STATUS          equ	3	;# 
   122     0004                     FSR             equ	4	;# 
   123     0005                     PORTA           equ	5	;# 
   124     0006                     PORTB           equ	6	;# 
   125     0007                     PORTC           equ	7	;# 
   126     0008                     PORTD           equ	8	;# 
   127     0009                     PORTE           equ	9	;# 
   128     000A                     PCLATH          equ	10	;# 
   129     000B                     INTCON          equ	11	;# 
   130     000C                     PIR1            equ	12	;# 
   131     000D                     PIR2            equ	13	;# 
   132     000E                     TMR1            equ	14	;# 
   133     000E                     TMR1L           equ	14	;# 
   134     000F                     TMR1H           equ	15	;# 
   135     0010                     T1CON           equ	16	;# 
   136     0011                     TMR2            equ	17	;# 
   137     0012                     T2CON           equ	18	;# 
   138     0013                     SSPBUF          equ	19	;# 
   139     0014                     SSPCON          equ	20	;# 
   140     0015                     CCPR1           equ	21	;# 
   141     0015                     CCPR1L          equ	21	;# 
   142     0016                     CCPR1H          equ	22	;# 
   143     0017                     CCP1CON         equ	23	;# 
   144     0018                     RCSTA           equ	24	;# 
   145     0019                     TXREG           equ	25	;# 
   146     001A                     RCREG           equ	26	;# 
   147     001B                     CCPR2           equ	27	;# 
   148     001B                     CCPR2L          equ	27	;# 
   149     001C                     CCPR2H          equ	28	;# 
   150     001D                     CCP2CON         equ	29	;# 
   151     001E                     ADRESH          equ	30	;# 
   152     001F                     ADCON0          equ	31	;# 
   153     0081                     OPTION_REG      equ	129	;# 
   154     0085                     TRISA           equ	133	;# 
   155     0086                     TRISB           equ	134	;# 
   156     0087                     TRISC           equ	135	;# 
   157     0088                     TRISD           equ	136	;# 
   158     0089                     TRISE           equ	137	;# 
   159     008C                     PIE1            equ	140	;# 
   160     008D                     PIE2            equ	141	;# 
   161     008E                     PCON            equ	142	;# 
   162     0091                     SSPCON2         equ	145	;# 
   163     0092                     PR2             equ	146	;# 
   164     0093                     SSPADD          equ	147	;# 
   165     0094                     SSPSTAT         equ	148	;# 
   166     0098                     TXSTA           equ	152	;# 
   167     0099                     SPBRG           equ	153	;# 
   168     009C                     CMCON           equ	156	;# 
   169     009D                     CVRCON          equ	157	;# 
   170     009E                     ADRESL          equ	158	;# 
   171     009F                     ADCON1          equ	159	;# 
   172     010C                     EEDATA          equ	268	;# 
   173     010D                     EEADR           equ	269	;# 
   174     010E                     EEDATH          equ	270	;# 
   175     010F                     EEADRH          equ	271	;# 
   176     018C                     EECON1          equ	396	;# 
   177     018D                     EECON2          equ	397	;# 
   178     001B                     _CCPR2L         set	27
   179     0015                     _CCPR1L         set	21
   180     001D                     _CCP2CON        set	29
   181     0017                     _CCP1CON        set	23
   182     0012                     _T2CON          set	18
   183     0008                     _PORTD          set	8
   184     0007                     _PORTC          set	7
   185     0043                     _RD3            set	67
   186     0042                     _RD2            set	66
   187     0041                     _RD1            set	65
   188     0040                     _RD0            set	64
   189     0092                     _PR2            set	146
   190     0088                     _TRISD          set	136
   191     0087                     _TRISC          set	135
   192                           
   193                           	psect	cinit
   194     07FC                     start_initialization:	
   195                           ; #config settings
   196                           
   197     07FC                     __initialization:
   198     07FC                     end_of_initialization:	
   199                           ;End of C runtime variable initialization code
   200                           
   201     07FC                     __end_of__initialization:
   202     07FC  0183               	clrf	3
   203     07FD  120A  118A  2F89   	ljmp	_main	;jump to C main() function
   204                           
   205                           	psect	cstackCOMMON
   206     0070                     __pcstackCOMMON:
   207     0070                     ?_setupPWM:
   208     0070                     ?_delay_ms:	
   209                           ; 1 bytes @ 0x0
   210                           
   211     0070                     ?_stopMotors:	
   212                           ; 1 bytes @ 0x0
   213                           
   214     0070                     ?_main:	
   215                           ; 1 bytes @ 0x0
   216                           
   217     0070                     ?_setPWMDutyCycle:	
   218                           ; 1 bytes @ 0x0
   219                           
   220     0070                     setPWMDutyCycle@speedA:	
   221                           ; 1 bytes @ 0x0
   222                           
   223     0070                     delay_ms@ms:	
   224                           ; 2 bytes @ 0x0
   225                           
   226     0070                     ??_setupPWM:	
   227                           ; 2 bytes @ 0x0
   228                           
   229     0070                     ??_stopMotors:	
   230                           ; 1 bytes @ 0x0
   231                           
   232                           
   233                           ; 1 bytes @ 0x0
   234     0070                     	ds	2
   235     0072                     setPWMDutyCycle@speedB:
   236     0072                     ??_delay_ms:	
   237                           ; 2 bytes @ 0x2
   238                           
   239                           
   240                           ; 1 bytes @ 0x2
   241     0072                     	ds	2
   242     0074                     ?_runMotorA:
   243     0074                     ?_runMotorB:	
   244                           ; 1 bytes @ 0x4
   245                           
   246     0074                     runMotorA@direction:	
   247                           ; 1 bytes @ 0x4
   248                           
   249     0074                     runMotorB@direction:	
   250                           ; 2 bytes @ 0x4
   251                           
   252     0074                     ??_setPWMDutyCycle:	
   253                           ; 2 bytes @ 0x4
   254                           
   255                           
   256                           ; 1 bytes @ 0x4
   257     0074                     	ds	2
   258     0076                     runMotorA@speed:
   259     0076                     runMotorB@speed:	
   260                           ; 2 bytes @ 0x6
   261                           
   262                           
   263                           ; 2 bytes @ 0x6
   264     0076                     	ds	2
   265     0078                     ??_runMotorA:
   266     0078                     ??_runMotorB:	
   267                           ; 1 bytes @ 0x8
   268                           
   269                           
   270                           ; 1 bytes @ 0x8
   271     0078                     	ds	2
   272     007A                     ??_main:
   273                           
   274                           	psect	maintext
   275     0789                     __pmaintext:	
   276                           ; 1 bytes @ 0xA
   277 ;;
   278 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   279 ;;
   280 ;; *************** function _main *****************
   281 ;; Defined at:
   282 ;;		line 37 in file "main.c"
   283 ;; Parameters:    Size  Location     Type
   284 ;;		None
   285 ;; Auto vars:     Size  Location     Type
   286 ;;		None
   287 ;; Return value:  Size  Location     Type
   288 ;;                  1    wreg      void 
   289 ;; Registers used:
   290 ;;		wreg, status,2, status,0, pclath, cstack
   291 ;; Tracked objects:
   292 ;;		On entry : B00/0
   293 ;;		On exit  : 0/0
   294 ;;		Unchanged: 0/0
   295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   296 ;;      Params:         0       0       0       0       0
   297 ;;      Locals:         0       0       0       0       0
   298 ;;      Temps:          0       0       0       0       0
   299 ;;      Totals:         0       0       0       0       0
   300 ;;Total ram usage:        0 bytes
   301 ;; Hardware stack levels required when called: 2
   302 ;; This function calls:
   303 ;;		_delay_ms
   304 ;;		_runMotorA
   305 ;;		_runMotorB
   306 ;;		_setupPWM
   307 ;;		_stopMotors
   308 ;; This function is called by:
   309 ;;		Startup code after reset
   310 ;; This function uses a non-reentrant model
   311 ;;
   312                           
   313     0789                     _main:	
   314                           ;psect for function _main
   315                           
   316     0789                     l713:	
   317                           ;incstack = 0
   318                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   319                           
   320                           
   321                           ;main.c: 39:     TRISC = 0x00;
   322     0789  1683               	bsf	3,5	;RP0=1, select bank1
   323     078A  1303               	bcf	3,6	;RP1=0, select bank1
   324     078B  0187               	clrf	7	;volatile
   325                           
   326                           ;main.c: 40:     TRISD = 0x00;
   327     078C  0188               	clrf	8	;volatile
   328                           
   329                           ;main.c: 41:     PORTC = 0x00;
   330     078D  1283               	bcf	3,5	;RP0=0, select bank0
   331     078E  1303               	bcf	3,6	;RP1=0, select bank0
   332     078F  0187               	clrf	7	;volatile
   333                           
   334                           ;main.c: 42:     PORTD = 0x00;
   335     0790  0188               	clrf	8	;volatile
   336     0791                     l715:
   337                           
   338                           ;main.c: 45:     setupPWM();
   339     0791  120A  118A  270D  120A  118A  	fcall	_setupPWM
   340     0796                     l717:
   341                           
   342                           ;main.c: 49:         runMotorA(2, 255);
   343     0796  3002               	movlw	2
   344     0797  00F4               	movwf	runMotorA@direction
   345     0798  3000               	movlw	0
   346     0799  00F5               	movwf	runMotorA@direction+1
   347     079A  30FF               	movlw	255
   348     079B  00F6               	movwf	runMotorA@speed
   349     079C  3000               	movlw	0
   350     079D  00F7               	movwf	runMotorA@speed+1
   351     079E  120A  118A  2737  120A  118A  	fcall	_runMotorA
   352     07A3                     l719:
   353                           
   354                           ;main.c: 50:         runMotorB(1, 255);
   355     07A3  3001               	movlw	1
   356     07A4  00F4               	movwf	runMotorB@direction
   357     07A5  3000               	movlw	0
   358     07A6  00F5               	movwf	runMotorB@direction+1
   359     07A7  30FF               	movlw	255
   360     07A8  00F6               	movwf	runMotorB@speed
   361     07A9  3000               	movlw	0
   362     07AA  00F7               	movwf	runMotorB@speed+1
   363     07AB  120A  118A  2760  120A  118A  	fcall	_runMotorB
   364     07B0                     l721:
   365                           
   366                           ;main.c: 51:         delay_ms(8000);
   367     07B0  3040               	movlw	64
   368     07B1  00F0               	movwf	delay_ms@ms
   369     07B2  301F               	movlw	31
   370     07B3  00F1               	movwf	delay_ms@ms+1
   371     07B4  120A  118A  271E  120A  118A  	fcall	_delay_ms
   372     07B9                     l723:
   373                           
   374                           ;main.c: 54:         stopMotors();
   375     07B9  120A  118A  2704  120A  118A  	fcall	_stopMotors
   376     07BE                     l725:
   377                           
   378                           ;main.c: 55:         delay_ms(8000);
   379     07BE  3040               	movlw	64
   380     07BF  00F0               	movwf	delay_ms@ms
   381     07C0  301F               	movlw	31
   382     07C1  00F1               	movwf	delay_ms@ms+1
   383     07C2  120A  118A  271E  120A  118A  	fcall	_delay_ms
   384     07C7                     l727:
   385                           
   386                           ;main.c: 58:         runMotorA(1, 255);
   387     07C7  3001               	movlw	1
   388     07C8  00F4               	movwf	runMotorA@direction
   389     07C9  3000               	movlw	0
   390     07CA  00F5               	movwf	runMotorA@direction+1
   391     07CB  30FF               	movlw	255
   392     07CC  00F6               	movwf	runMotorA@speed
   393     07CD  3000               	movlw	0
   394     07CE  00F7               	movwf	runMotorA@speed+1
   395     07CF  120A  118A  2737  120A  118A  	fcall	_runMotorA
   396     07D4                     l729:
   397                           
   398                           ;main.c: 59:         runMotorB(2, 255);
   399     07D4  3002               	movlw	2
   400     07D5  00F4               	movwf	runMotorB@direction
   401     07D6  3000               	movlw	0
   402     07D7  00F5               	movwf	runMotorB@direction+1
   403     07D8  30FF               	movlw	255
   404     07D9  00F6               	movwf	runMotorB@speed
   405     07DA  3000               	movlw	0
   406     07DB  00F7               	movwf	runMotorB@speed+1
   407     07DC  120A  118A  2760  120A  118A  	fcall	_runMotorB
   408     07E1                     l731:
   409                           
   410                           ;main.c: 60:         delay_ms(8000);
   411     07E1  3040               	movlw	64
   412     07E2  00F0               	movwf	delay_ms@ms
   413     07E3  301F               	movlw	31
   414     07E4  00F1               	movwf	delay_ms@ms+1
   415     07E5  120A  118A  271E  120A  118A  	fcall	_delay_ms
   416     07EA                     l733:
   417                           
   418                           ;main.c: 63:         stopMotors();
   419     07EA  120A  118A  2704  120A  118A  	fcall	_stopMotors
   420     07EF                     l735:
   421                           
   422                           ;main.c: 64:         delay_ms(8000);
   423     07EF  3040               	movlw	64
   424     07F0  00F0               	movwf	delay_ms@ms
   425     07F1  301F               	movlw	31
   426     07F2  00F1               	movwf	delay_ms@ms+1
   427     07F3  120A  118A  271E  120A  118A  	fcall	_delay_ms
   428     07F8  2F96               	goto	l717
   429     07F9  120A  118A  2800   	ljmp	start
   430     07FC                     __end_of_main:
   431                           
   432                           	psect	text1
   433     0704                     __ptext1:	
   434 ;; *************** function _stopMotors *****************
   435 ;; Defined at:
   436 ;;		line 109 in file "main.c"
   437 ;; Parameters:    Size  Location     Type
   438 ;;		None
   439 ;; Auto vars:     Size  Location     Type
   440 ;;		None
   441 ;; Return value:  Size  Location     Type
   442 ;;                  1    wreg      void 
   443 ;; Registers used:
   444 ;;		status,2
   445 ;; Tracked objects:
   446 ;;		On entry : 0/0
   447 ;;		On exit  : 0/0
   448 ;;		Unchanged: 0/0
   449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   450 ;;      Params:         0       0       0       0       0
   451 ;;      Locals:         0       0       0       0       0
   452 ;;      Temps:          0       0       0       0       0
   453 ;;      Totals:         0       0       0       0       0
   454 ;;Total ram usage:        0 bytes
   455 ;; Hardware stack levels used: 1
   456 ;; This function calls:
   457 ;;		Nothing
   458 ;; This function is called by:
   459 ;;		_main
   460 ;; This function uses a non-reentrant model
   461 ;;
   462                           
   463     0704                     _stopMotors:	
   464                           ;psect for function _stopMotors
   465                           
   466     0704                     l651:	
   467                           ;incstack = 0
   468                           ; Regs used in _stopMotors: [status,2]
   469                           
   470                           
   471                           ;main.c: 110:     CCPR1L = 0;
   472     0704  1283               	bcf	3,5	;RP0=0, select bank0
   473     0705  1303               	bcf	3,6	;RP1=0, select bank0
   474     0706  0195               	clrf	21	;volatile
   475                           
   476                           ;main.c: 111:     CCPR2L = 0;
   477     0707  019B               	clrf	27	;volatile
   478     0708                     l653:
   479                           
   480                           ;main.c: 112:     RD0 = 0;
   481     0708  1008               	bcf	8,0	;volatile
   482     0709                     l655:
   483                           
   484                           ;main.c: 113:     RD1 = 0;
   485     0709  1088               	bcf	8,1	;volatile
   486     070A                     l657:
   487                           
   488                           ;main.c: 114:     RD2 = 0;
   489     070A  1108               	bcf	8,2	;volatile
   490     070B                     l659:
   491                           
   492                           ;main.c: 115:     RD3 = 0;
   493     070B  1188               	bcf	8,3	;volatile
   494     070C                     l69:
   495     070C  0008               	return
   496     070D                     __end_of_stopMotors:
   497                           
   498                           	psect	text2
   499     070D                     __ptext2:	
   500 ;; *************** function _setupPWM *****************
   501 ;; Defined at:
   502 ;;		line 69 in file "main.c"
   503 ;; Parameters:    Size  Location     Type
   504 ;;		None
   505 ;; Auto vars:     Size  Location     Type
   506 ;;		None
   507 ;; Return value:  Size  Location     Type
   508 ;;                  1    wreg      void 
   509 ;; Registers used:
   510 ;;		status,2
   511 ;; Tracked objects:
   512 ;;		On entry : 0/0
   513 ;;		On exit  : 0/0
   514 ;;		Unchanged: 0/0
   515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   516 ;;      Params:         0       0       0       0       0
   517 ;;      Locals:         0       0       0       0       0
   518 ;;      Temps:          0       0       0       0       0
   519 ;;      Totals:         0       0       0       0       0
   520 ;;Total ram usage:        0 bytes
   521 ;; Hardware stack levels used: 1
   522 ;; This function calls:
   523 ;;		Nothing
   524 ;; This function is called by:
   525 ;;		_main
   526 ;; This function uses a non-reentrant model
   527 ;;
   528                           
   529     070D                     _setupPWM:	
   530                           ;psect for function _setupPWM
   531                           
   532     070D                     l621:	
   533                           ;incstack = 0
   534                           ; Regs used in _setupPWM: [status,2]
   535                           
   536                           
   537                           ;main.c: 70:     T2CON = 0xFF;
   538     070D  30FF               	movlw	255
   539     070E  1283               	bcf	3,5	;RP0=0, select bank0
   540     070F  1303               	bcf	3,6	;RP1=0, select bank0
   541     0710  0092               	movwf	18	;volatile
   542                           
   543                           ;main.c: 71:     PR2 = 255;
   544     0711  30FF               	movlw	255
   545     0712  1683               	bsf	3,5	;RP0=1, select bank1
   546     0713  1303               	bcf	3,6	;RP1=0, select bank1
   547     0714  0092               	movwf	18	;volatile
   548                           
   549                           ;main.c: 72:     CCP1CON = 0x0C;
   550     0715  300C               	movlw	12
   551     0716  1283               	bcf	3,5	;RP0=0, select bank0
   552     0717  1303               	bcf	3,6	;RP1=0, select bank0
   553     0718  0097               	movwf	23	;volatile
   554                           
   555                           ;main.c: 73:     CCP2CON = 0x0C;
   556     0719  300C               	movlw	12
   557     071A  009D               	movwf	29	;volatile
   558     071B                     l623:
   559                           
   560                           ;main.c: 74:     CCPR1L = 0;
   561     071B  0195               	clrf	21	;volatile
   562                           
   563                           ;main.c: 75:     CCPR2L = 0;
   564     071C  019B               	clrf	27	;volatile
   565     071D                     l51:
   566     071D  0008               	return
   567     071E                     __end_of_setupPWM:
   568                           
   569                           	psect	text3
   570     0760                     __ptext3:	
   571 ;; *************** function _runMotorB *****************
   572 ;; Defined at:
   573 ;;		line 97 in file "main.c"
   574 ;; Parameters:    Size  Location     Type
   575 ;;  direction       2    4[COMMON] int 
   576 ;;  speed           2    6[COMMON] int 
   577 ;; Auto vars:     Size  Location     Type
   578 ;;		None
   579 ;; Return value:  Size  Location     Type
   580 ;;                  1    wreg      void 
   581 ;; Registers used:
   582 ;;		wreg, status,2, status,0, pclath, cstack
   583 ;; Tracked objects:
   584 ;;		On entry : 0/0
   585 ;;		On exit  : 0/0
   586 ;;		Unchanged: 0/0
   587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   588 ;;      Params:         4       0       0       0       0
   589 ;;      Locals:         0       0       0       0       0
   590 ;;      Temps:          2       0       0       0       0
   591 ;;      Totals:         6       0       0       0       0
   592 ;;Total ram usage:        6 bytes
   593 ;; Hardware stack levels used: 1
   594 ;; Hardware stack levels required when called: 1
   595 ;; This function calls:
   596 ;;		_setPWMDutyCycle
   597 ;; This function is called by:
   598 ;;		_main
   599 ;; This function uses a non-reentrant model
   600 ;;
   601                           
   602     0760                     _runMotorB:	
   603                           ;psect for function _runMotorB
   604                           
   605     0760                     l697:	
   606                           ;incstack = 0
   607                           ; Regs used in _runMotorB: [wreg+status,2+status,0+pclath+cstack]
   608                           
   609                           
   610                           ;main.c: 98:     setPWMDutyCycle(CCPR1L, speed);
   611     0760  1283               	bcf	3,5	;RP0=0, select bank0
   612     0761  1303               	bcf	3,6	;RP1=0, select bank0
   613     0762  0815               	movf	21,w	;volatile
   614     0763  00F8               	movwf	??_runMotorB
   615     0764  01F9               	clrf	??_runMotorB+1
   616     0765  0878               	movf	??_runMotorB,w
   617     0766  00F0               	movwf	setPWMDutyCycle@speedA
   618     0767  0879               	movf	??_runMotorB+1,w
   619     0768  00F1               	movwf	setPWMDutyCycle@speedA+1
   620     0769  0877               	movf	runMotorB@speed+1,w
   621     076A  00F3               	movwf	setPWMDutyCycle@speedB+1
   622     076B  0876               	movf	runMotorB@speed,w
   623     076C  00F2               	movwf	setPWMDutyCycle@speedB
   624     076D  120A  118A  26FD  120A  118A  	fcall	_setPWMDutyCycle
   625     0772                     l699:
   626                           
   627                           ;main.c: 99:     if (direction == 1) {
   628     0772  0374               	decf	runMotorB@direction,w
   629     0773  0475               	iorwf	runMotorB@direction+1,w
   630     0774  1D03               	btfss	3,2
   631     0775  2F77               	goto	u81
   632     0776  2F78               	goto	u80
   633     0777                     u81:
   634     0777  2F7D               	goto	l703
   635     0778                     u80:
   636     0778                     l701:
   637                           
   638                           ;main.c: 100:         RD2 = 1;
   639     0778  1283               	bcf	3,5	;RP0=0, select bank0
   640     0779  1303               	bcf	3,6	;RP1=0, select bank0
   641     077A  1508               	bsf	8,2	;volatile
   642                           
   643                           ;main.c: 101:         RD3 = 0;
   644     077B  1188               	bcf	8,3	;volatile
   645                           
   646                           ;main.c: 102:     } else if (direction == 2) {
   647     077C  2F88               	goto	l66
   648     077D                     l703:
   649     077D  3002               	movlw	2
   650     077E  0674               	xorwf	runMotorB@direction,w
   651     077F  0475               	iorwf	runMotorB@direction+1,w
   652     0780  1D03               	btfss	3,2
   653     0781  2F83               	goto	u91
   654     0782  2F84               	goto	u90
   655     0783                     u91:
   656     0783  2F88               	goto	l66
   657     0784                     u90:
   658     0784                     l705:
   659                           
   660                           ;main.c: 103:         RD2 = 0;
   661     0784  1283               	bcf	3,5	;RP0=0, select bank0
   662     0785  1303               	bcf	3,6	;RP1=0, select bank0
   663     0786  1108               	bcf	8,2	;volatile
   664                           
   665                           ;main.c: 104:         RD3 = 1;
   666     0787  1588               	bsf	8,3	;volatile
   667     0788                     l66:
   668     0788  0008               	return
   669     0789                     __end_of_runMotorB:
   670                           
   671                           	psect	text4
   672     0737                     __ptext4:	
   673 ;; *************** function _runMotorA *****************
   674 ;; Defined at:
   675 ;;		line 85 in file "main.c"
   676 ;; Parameters:    Size  Location     Type
   677 ;;  direction       2    4[COMMON] int 
   678 ;;  speed           2    6[COMMON] int 
   679 ;; Auto vars:     Size  Location     Type
   680 ;;		None
   681 ;; Return value:  Size  Location     Type
   682 ;;                  1    wreg      void 
   683 ;; Registers used:
   684 ;;		wreg, status,2, status,0, pclath, cstack
   685 ;; Tracked objects:
   686 ;;		On entry : 0/0
   687 ;;		On exit  : 0/0
   688 ;;		Unchanged: 0/0
   689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   690 ;;      Params:         4       0       0       0       0
   691 ;;      Locals:         0       0       0       0       0
   692 ;;      Temps:          2       0       0       0       0
   693 ;;      Totals:         6       0       0       0       0
   694 ;;Total ram usage:        6 bytes
   695 ;; Hardware stack levels used: 1
   696 ;; Hardware stack levels required when called: 1
   697 ;; This function calls:
   698 ;;		_setPWMDutyCycle
   699 ;; This function is called by:
   700 ;;		_main
   701 ;; This function uses a non-reentrant model
   702 ;;
   703                           
   704     0737                     _runMotorA:	
   705                           ;psect for function _runMotorA
   706                           
   707     0737                     l687:	
   708                           ;incstack = 0
   709                           ; Regs used in _runMotorA: [wreg+status,2+status,0+pclath+cstack]
   710                           
   711                           
   712                           ;main.c: 86:     setPWMDutyCycle(speed, CCPR2L);
   713     0737  0877               	movf	runMotorA@speed+1,w
   714     0738  00F1               	movwf	setPWMDutyCycle@speedA+1
   715     0739  0876               	movf	runMotorA@speed,w
   716     073A  00F0               	movwf	setPWMDutyCycle@speedA
   717     073B  1283               	bcf	3,5	;RP0=0, select bank0
   718     073C  1303               	bcf	3,6	;RP1=0, select bank0
   719     073D  081B               	movf	27,w	;volatile
   720     073E  00F8               	movwf	??_runMotorA
   721     073F  01F9               	clrf	??_runMotorA+1
   722     0740  0878               	movf	??_runMotorA,w
   723     0741  00F2               	movwf	setPWMDutyCycle@speedB
   724     0742  0879               	movf	??_runMotorA+1,w
   725     0743  00F3               	movwf	setPWMDutyCycle@speedB+1
   726     0744  120A  118A  26FD  120A  118A  	fcall	_setPWMDutyCycle
   727     0749                     l689:
   728                           
   729                           ;main.c: 87:     if (direction == 1) {
   730     0749  0374               	decf	runMotorA@direction,w
   731     074A  0475               	iorwf	runMotorA@direction+1,w
   732     074B  1D03               	btfss	3,2
   733     074C  2F4E               	goto	u61
   734     074D  2F4F               	goto	u60
   735     074E                     u61:
   736     074E  2F54               	goto	l693
   737     074F                     u60:
   738     074F                     l691:
   739                           
   740                           ;main.c: 88:         RD0 = 1;
   741     074F  1283               	bcf	3,5	;RP0=0, select bank0
   742     0750  1303               	bcf	3,6	;RP1=0, select bank0
   743     0751  1408               	bsf	8,0	;volatile
   744                           
   745                           ;main.c: 89:         RD1 = 0;
   746     0752  1088               	bcf	8,1	;volatile
   747                           
   748                           ;main.c: 90:     } else if (direction == 2) {
   749     0753  2F5F               	goto	l60
   750     0754                     l693:
   751     0754  3002               	movlw	2
   752     0755  0674               	xorwf	runMotorA@direction,w
   753     0756  0475               	iorwf	runMotorA@direction+1,w
   754     0757  1D03               	btfss	3,2
   755     0758  2F5A               	goto	u71
   756     0759  2F5B               	goto	u70
   757     075A                     u71:
   758     075A  2F5F               	goto	l60
   759     075B                     u70:
   760     075B                     l695:
   761                           
   762                           ;main.c: 91:         RD0 = 0;
   763     075B  1283               	bcf	3,5	;RP0=0, select bank0
   764     075C  1303               	bcf	3,6	;RP1=0, select bank0
   765     075D  1008               	bcf	8,0	;volatile
   766                           
   767                           ;main.c: 92:         RD1 = 1;
   768     075E  1488               	bsf	8,1	;volatile
   769     075F                     l60:
   770     075F  0008               	return
   771     0760                     __end_of_runMotorA:
   772                           
   773                           	psect	text5
   774     06FD                     __ptext5:	
   775 ;; *************** function _setPWMDutyCycle *****************
   776 ;; Defined at:
   777 ;;		line 79 in file "main.c"
   778 ;; Parameters:    Size  Location     Type
   779 ;;  speedA          2    0[COMMON] int 
   780 ;;  speedB          2    2[COMMON] int 
   781 ;; Auto vars:     Size  Location     Type
   782 ;;		None
   783 ;; Return value:  Size  Location     Type
   784 ;;                  1    wreg      void 
   785 ;; Registers used:
   786 ;;		wreg
   787 ;; Tracked objects:
   788 ;;		On entry : 0/0
   789 ;;		On exit  : 0/0
   790 ;;		Unchanged: 0/0
   791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   792 ;;      Params:         4       0       0       0       0
   793 ;;      Locals:         0       0       0       0       0
   794 ;;      Temps:          0       0       0       0       0
   795 ;;      Totals:         4       0       0       0       0
   796 ;;Total ram usage:        4 bytes
   797 ;; Hardware stack levels used: 1
   798 ;; This function calls:
   799 ;;		Nothing
   800 ;; This function is called by:
   801 ;;		_runMotorA
   802 ;;		_runMotorB
   803 ;; This function uses a non-reentrant model
   804 ;;
   805                           
   806     06FD                     _setPWMDutyCycle:	
   807                           ;psect for function _setPWMDutyCycle
   808                           
   809     06FD                     l685:	
   810                           ;incstack = 0
   811                           ; Regs used in _setPWMDutyCycle: [wreg]
   812                           
   813                           
   814                           ;main.c: 80:     CCPR1L = (unsigned char)speedA;
   815     06FD  0870               	movf	setPWMDutyCycle@speedA,w
   816     06FE  1283               	bcf	3,5	;RP0=0, select bank0
   817     06FF  1303               	bcf	3,6	;RP1=0, select bank0
   818     0700  0095               	movwf	21	;volatile
   819                           
   820                           ;main.c: 81:     CCPR2L = (unsigned char)speedB;
   821     0701  0872               	movf	setPWMDutyCycle@speedB,w
   822     0702  009B               	movwf	27	;volatile
   823     0703                     l54:
   824     0703  0008               	return
   825     0704                     __end_of_setPWMDutyCycle:
   826                           
   827                           	psect	text6
   828     071E                     __ptext6:	
   829 ;; *************** function _delay_ms *****************
   830 ;; Defined at:
   831 ;;		line 119 in file "main.c"
   832 ;; Parameters:    Size  Location     Type
   833 ;;  ms              2    0[COMMON] unsigned int 
   834 ;; Auto vars:     Size  Location     Type
   835 ;;		None
   836 ;; Return value:  Size  Location     Type
   837 ;;                  1    wreg      void 
   838 ;; Registers used:
   839 ;;		wreg, status,2, status,0
   840 ;; Tracked objects:
   841 ;;		On entry : 0/0
   842 ;;		On exit  : 0/0
   843 ;;		Unchanged: 0/0
   844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   845 ;;      Params:         2       0       0       0       0
   846 ;;      Locals:         0       0       0       0       0
   847 ;;      Temps:          2       0       0       0       0
   848 ;;      Totals:         4       0       0       0       0
   849 ;;Total ram usage:        4 bytes
   850 ;; Hardware stack levels used: 1
   851 ;; This function calls:
   852 ;;		Nothing
   853 ;; This function is called by:
   854 ;;		_main
   855 ;; This function uses a non-reentrant model
   856 ;;
   857                           
   858     071E                     _delay_ms:	
   859                           ;psect for function _delay_ms
   860                           
   861     071E                     l707:	
   862                           ;incstack = 0
   863                           ; Regs used in _delay_ms: [wreg+status,2+status,0]
   864                           
   865                           
   866                           ;main.c: 120:     while (ms--) {
   867     071E  2F28               	goto	l711
   868     071F                     l709:
   869                           
   870                           ;main.c: 121:     _delay((unsigned long)((1)*(16000000/4000.0)));
   871     071F  3006               	movlw	6
   872     0720  00F3               	movwf	??_delay_ms+1
   873     0721  3030               	movlw	48
   874     0722  00F2               	movwf	??_delay_ms
   875     0723                     u117:
   876     0723  0BF2               	decfsz	??_delay_ms,f
   877     0724  2F23               	goto	u117
   878     0725  0BF3               	decfsz	??_delay_ms+1,f
   879     0726  2F23               	goto	u117
   880     0727  0000               	nop
   881     0728                     l711:
   882                           
   883                           ;main.c: 120:     while (ms--) {
   884     0728  3001               	movlw	1
   885     0729  02F0               	subwf	delay_ms@ms,f
   886     072A  3000               	movlw	0
   887     072B  1C03               	skipc
   888     072C  03F1               	decf	delay_ms@ms+1,f
   889     072D  02F1               	subwf	delay_ms@ms+1,f
   890     072E  0A70               	incf	delay_ms@ms,w
   891     072F  1D03               	skipz
   892     0730  2F35               	goto	u101
   893     0731  0A71               	incf	delay_ms@ms+1,w
   894     0732  1D03               	btfss	3,2
   895     0733  2F35               	goto	u101
   896     0734  2F36               	goto	u100
   897     0735                     u101:
   898     0735  2F1F               	goto	l709
   899     0736                     u100:
   900     0736                     l75:
   901     0736  0008               	return
   902     0737                     __end_of_delay_ms:
   903     0002                     ___latbits      equ	2
   904     007E                     btemp           set	126	;btemp
   905     007E                     wtemp0          set	126
   906                           
   907                           	psect	config
   908                           
   909                           ;Config register CONFIG @ 0x2007
   910                           ;	Oscillator Selection bits
   911                           ;	FOSC = XT, XT oscillator
   912                           ;	Watchdog Timer Enable bit
   913                           ;	WDTE = OFF, WDT disabled
   914                           ;	Power-up Timer Enable bit
   915                           ;	PWRTE = OFF, PWRT disabled
   916                           ;	Brown-out Reset Enable bit
   917                           ;	BOREN = ON, BOR enabled
   918                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   919                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   920                           ;	Data EEPROM Memory Code Protection bit
   921                           ;	CPD = OFF, Data EEPROM code protection off
   922                           ;	Flash Program Memory Write Enable bits
   923                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   924                           ;	In-Circuit Debugger Mode bit
   925                           ;	DEBUG = 0x1, unprogrammed default
   926                           ;	Flash Program Memory Code Protection bit
   927                           ;	CP = OFF, Code protection off
   928     2007                     	org	8199
   929     2007  3F79               	dw	16249

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      10
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_runMotorA
    _main->_runMotorB
    _runMotorB->_setPWMDutyCycle
    _runMotorA->_setPWMDutyCycle

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     262
                           _delay_ms
                          _runMotorA
                          _runMotorB
                           _setupPWM
                         _stopMotors
 ---------------------------------------------------------------------------------
 (1) _stopMotors                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setupPWM                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _runMotorB                                            6     2      4     118
                                              4 COMMON     6     2      4
                    _setPWMDutyCycle
 ---------------------------------------------------------------------------------
 (1) _runMotorA                                            6     2      4     118
                                              4 COMMON     6     2      4
                    _setPWMDutyCycle
 ---------------------------------------------------------------------------------
 (2) _setPWMDutyCycle                                      4     0      4      48
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             4     2      2      26
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay_ms
   _runMotorA
     _setPWMDutyCycle
   _runMotorB
     _setPWMDutyCycle
   _setupPWM
   _stopMotors

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14     10      10     71.4%
BANK0               80      0       0      0.0%
BANK1               80      0       0      0.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      10      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Sun Dec 01 12:01:30 2024

                     l51 071D                       l60 075F                       l54 0703  
                     l66 0788                       l75 0736                       l69 070C  
                     u60 074F                       u61 074E                       u70 075B  
                     u71 075A                       u80 0778                       u81 0777  
                     u90 0784                       u91 0783                      l701 0778  
                    l621 070D                      l711 0728                      l703 077D  
                    l623 071B                      l705 0784                      l721 07B0  
                    l713 0789                      l707 071E                      l651 0704  
                    l731 07E1                      l723 07B9                      l715 0791  
                    l709 071F                      l653 0708                      l733 07EA  
                    l725 07BE                      l717 0796                      l655 0709  
                    l735 07EF                      l727 07C7                      l719 07A3  
                    l657 070A                      l729 07D4                      l691 074F  
                    l659 070B                      l685 06FD                      l693 0754  
                    l695 075B                      l687 0737                      l689 0749  
                    l697 0760                      l699 0772                      _RD0 0040  
                    _RD1 0041                      _RD2 0042                      _RD3 0043  
                    u100 0736                      u101 0735                      u117 0723  
                    _PR2 0092                     _main 0789                     btemp 007E  
                   start 0000       runMotorA@direction 0074       runMotorB@direction 0074  
                  ?_main 0070                    _T2CON 0012                    _PORTC 0007  
                  _PORTD 0008                    _TRISC 0087                    _TRISD 0088  
                  status 0003                    wtemp0 007E          __initialization 07FC  
           __end_of_main 07FC                   ??_main 007A                   _CCPR1L 0015  
                 _CCPR2L 001B         __end_of_delay_ms 0737         __end_of_setupPWM 071E  
__end_of__initialization 07FC           __pcstackCOMMON 0070               __pmaintext 0789  
                _CCP1CON 0017                  _CCP2CON 001D                ?_delay_ms 0070  
              ?_setupPWM 0070                  __ptext1 0704                  __ptext2 070D  
                __ptext3 0760                  __ptext4 0737                  __ptext5 06FD  
                __ptext6 071E               ??_delay_ms 0072               delay_ms@ms 0070  
   end_of_initialization 07FC               ??_setupPWM 0070        __end_of_runMotorA 0760  
      __end_of_runMotorB 0789        ??_setPWMDutyCycle 0074           runMotorA@speed 0076  
         runMotorB@speed 0076               _stopMotors 0704      start_initialization 07FC  
              ___latbits 0002              ?_stopMotors 0070          _setPWMDutyCycle 06FD  
              _runMotorA 0737                _runMotorB 0760               ?_runMotorA 0074  
             ?_runMotorB 0074                 _delay_ms 071E  __end_of_setPWMDutyCycle 0704  
               _setupPWM 070D    setPWMDutyCycle@speedA 0070    setPWMDutyCycle@speedB 0072  
           ??_stopMotors 0070              ??_runMotorA 0078              ??_runMotorB 0078  
     __end_of_stopMotors 070D         ?_setPWMDutyCycle 0070  
